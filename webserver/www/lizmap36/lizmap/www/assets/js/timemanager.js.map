{"version":3,"file":"../../lizmap/www/assets/js/timemanager.js","mappings":"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","sources":["webpack://assets/./src/legacy/timemanager.js"],"sourcesContent":["var lizTimemanager = function() {\n\n    lizMap.events.on({\n        'uicreated':function(evt){\n\n            // Attributes\n            var config = lizMap.config;\n            var layers = lizMap.layers;\n            var tmActive = false;\n            var tmLayersNumber = 0;\n            var tmLayerIndex = 0;\n            var tmLayersDataFetched = 0;\n            var tmLayersReady = false;\n\n            if (!('timemanagerLayers' in config))\n              return -1;\n\n            // Count layers\n            tmLayersNumber = Object.keys(lizMap.config.timemanagerLayers).length;\n\n            $('#timemanager-menu button.btn-timemanager-clear').click(function() {\n                $('#button-timemanager').click();\n            });\n\n            lizMap.events.on({\n                minidockopened: function(e) {\n                    if ( e.id == 'timemanager' ) {\n                        if (!tmActive){\n                            $('#timemanager-menu').show();\n                            activateTimemanager();\n                            tmActive = true;\n                        }\n                    }\n                },\n                minidockclosed: function(e) {\n                    if ( e.id == 'timemanager' ) {\n                        if(tmActive)\n                            deactivateTimemanager();\n                    }\n                }\n            });\n\n            // Init slider with no values\n            $(\"#tmSlider\").slider( );\n\n            var filter = null;\n            var tmAnimationTimer;\n            var tmCurrentDate;\n            var tmStartDate = -Infinity; // lower bound of when values\n            var tmEndDate = Infinity; // upper value of when values\n\n            // Size of a frame\n            var tmTimeFrameSize = config.options['tmTimeFrameSize'];\n            // Unit for the frame size : milliseconds, seconds, minutes, hours, days, weeks, months, years\n            var tmTimeFrameType = config.options['tmTimeFrameType'];\n            // Length  for each frame (between each step)\n            var tmAnimationFrameLength = config.options['tmAnimationFrameLength']\n            if (tmAnimationFrameLength < 1000)\n                tmAnimationFrameLength = 1000;\n\n            // Activate timemanager\n            function activateTimemanager(){\n\n                // hourglass\n                //$('#loading').dialog('open');\n\n                // Get min and max timestamps from layers\n                var minTime = Infinity, maxTime = -Infinity ;\n                for (var l in config.timemanagerLayers) {\n                    var tmLayerConfig = config.timemanagerLayers[l];\n                    getDataFromLayer(tmLayerConfig, function(mi, ma){\n\n                        // Keep min and max values\n                        config.timemanagerLayers[l]['min'] = mi;\n                        config.timemanagerLayers[l]['max'] = ma;\n\n                        // Get truncated min and max\n                        var layerMinTime = moment(mi).startOf(tmTimeFrameType.slice(0, -1))\n                        var layerMaxTime = moment(ma).endOf(tmTimeFrameType.slice(0, -1))\n\n                        // Calculate global min and max\n                        if (layerMinTime && layerMinTime < minTime) minTime = layerMinTime;\n                        if (layerMaxTime && layerMaxTime > maxTime) maxTime = layerMaxTime;\n                        tmStartDate = moment( minTime );\n                        tmEndDate = moment( maxTime );\n                        tmCurrentDate = moment( tmStartDate );\n\n                        // Set slider\n                        $('#tmCurrentValue').html(formatDatetime(tmStartDate, tmTimeFrameType));\n                        $('#tmNextValue').html(formatDatetime(tmEndDate, tmTimeFrameType));\n                        toggleNextSpan();\n                        $(\"#tmSlider\").slider({\n                            min: tmStartDate.valueOf(),\n                            max: tmEndDate.startOf(tmTimeFrameType.slice(0, -1)).valueOf(),\n                            value: tmStartDate.valueOf()\n                        });\n                        tmLayersDataFetched+= 1;\n                        tmLayersReady = (tmLayersDataFetched == tmLayersNumber);\n                        loadTimemanager(tmLayersReady);\n\n                    });\n                }\n                // Make sure to trigger filter for slider position\n                onSliderStop();\n            }\n\n            // Deactivate Timemanager feature\n            function deactivateTimemanager(){\n                // Stop animation\n                stopAnimation(true);\n\n                // Hide menu\n                $('#timemanager-menu').hide();\n                tmActive = false;\n\n                // Remove layers filters\n                unFilterTimeLayers();\n            }\n\n            function getDataFromLayer(layerConfig, aCallback){\n\n                // Get min and max timestamp from layer\n                var fieldnameContent = layerConfig.startAttribute;\n                if( layerConfig.endAttribute && layerConfig.endAttribute != ''\n                && layerConfig.endAttribute != layerConfig.startAttribute) {\n                    fieldnameContent+= ',' + layerConfig.endAttribute;\n                }\n\n                // Check if min and max are already in config\n                // Usefull for non SQL layers\n                if ('min_timestamp' in layerConfig && layerConfig.min_timestamp && layerConfig.min_timestamp != ''\n                    &&\n                    'max_timestamp' in layerConfig && layerConfig.max_timestamp && layerConfig.max_timestamp != ''\n                ) {\n                    var dmin = layerConfig.min_timestamp;\n                    var dmax = layerConfig.max_timestamp;\n                    aCallback(dmin, dmax);\n                    return true;\n                }\n\n                // Else query min and max timestamps via lizmap filter methods\n                var sdata = {\n                    request: 'getMinAndMaxValues',\n                    layerId: layerConfig.layerId,\n                    fieldname: fieldnameContent,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function(result){\n                    if( !result )\n                        return false;\n                    if( 'status' in result && result['status'] == 'error' ){\n                        console.log(result.title + ': ' + result.detail);\n                        return false;\n                    }\n                    // Get min and max from feature\n                    var dmin = null;\n                    var dmax = null;\n                    for(var a in result){\n                        var feat = result[a];\n                        dmin = feat['min'];\n                        dmax = feat['max'];\n                    }\n                    // Callback\n                    aCallback(dmin, dmax);\n\n                }, 'json');\n            }\n\n\n            // Add event on slider and buttons\n            $( \"#tmSlider\" ).on( \"slide\", function( event, ui ) {\n                onSliderUpdate();\n            });\n            $( \"#tmSlider\" ).on( \"slidestop\", function( event, ui ) {\n                onSliderStop();\n            });\n            $(\"#tmTogglePlay\").click(function(){\n                if( $(this).html() == lizDict['timemanager.toolbar.play'] ){\n                    startAnimation();\n                } else {\n                    stopAnimation();\n                }\n            });\n            $(\"#tmPrev\").click(function(){stopAnimation(false);movePrev();});\n            $(\"#tmNext\").click(function(){stopAnimation(false);moveNext();});\n\n\n            function getSideDate(curDate, timeFrameSize, timeFrameType, factor, fDirection){\n                var returnVal = moment(curDate).startOf(timeFrameType);\n                var addValue = factor * tmTimeFrameSize * fDirection;\n                returnVal.add(addValue, timeFrameType);\n                return returnVal;\n            }\n\n\n            function loadTimemanager(ready){\n                if(!ready){\n                    return true;\n                }\n                // Make sure to trigger filter for slider position\n                onSliderStop();\n            }\n\n            function startAnimation() {\n                // Stop animation if already loaded (play/pause behaviour)\n                if (tmAnimationTimer) {\n                    stopAnimation(true);\n                }\n\n                // Change play butonn into pause\n                $('#tmTogglePlay').html(lizDict['timemanager.toolbar.pause']);\n\n                // Set current date to beginning if not set\n                if (!tmCurrentDate) {\n                    tmCurrentDate = tmStartDate;\n                }\n                var next = function() {\n                    moveNext();\n                };\n                tmAnimationTimer = window.setInterval(next, tmAnimationFrameLength);\n            }\n\n\n            // Build the filter for QGIS Server\n            function buildDateFilter(layerConfig, min_val, max_val){\n                var filters = [];\n\n                // Do nothing if min and max values entered equals the field min and max possible values\n                if( min_val == layerConfig['min'] && max_val == layerConfig['max'] ){\n                    layerConfig['data'] = {\n                        'min_date': null,\n                        'max_date': null\n                    };\n                    layerConfig['filter'] = null;\n                    return null;\n                }\n\n                // fields\n                var startField = layerConfig.startAttribute;\n                var endField = layerConfig.endAttribute;\n                var attributeResolution = layerConfig.attributeResolution;\n\n                // min date filter\n                if(min_val && Date.parse(min_val)){\n                    var f_min = '( \"' + startField + '\"' + \" >= '\" + formatDatetime(min_val, attributeResolution) + \"'\";\n                    if (endField && endField != '' && endField != startField){\n                        f_min += \" OR \" + ' \"' + endField + '\"' + \" >= '\" + formatDatetime(min_val, attributeResolution) + \"'\";\n                    }\n                    f_min += \" )\";\n                    filters.push(f_min);\n                }else{\n                    min_val = null;\n                }\n\n                // max date filter\n                if(max_val && Date.parse(max_val)){\n                    var f_max = '( \"' + startField + '\"' + \" <= '\" + formatDatetime(max_val, attributeResolution) + \"'\";\n                    if(endField && endField != '' && endField != startField) {\n                        f_max += \" OR \" + ' \"' + endField + '\"' + \" <= '\" + formatDatetime(max_val, attributeResolution) + \"'\";\n                    }\n                    f_max += \" )\";\n                    filters.push(f_max);\n                }else{\n                    max_val = null;\n                }\n\n                var filter = null;\n                if(filters.length){\n                    filter = ' ( ';\n                    filter+= filters.join(' AND ');\n                    filter+= ' ) ';\n                }\n                layerConfig['data'] = {\n                    'min_date': min_val,\n                    'max_date': max_val\n                };\n                layerConfig['filter'] = filter;\n                //console.log(filter);\n                return filter;\n            }\n\n\n            function setLayersFilter(lowerBoundary, upperBoundary){\n\n                // shift upperBoundary for 1 millisecond to have strict <\n                // lowerBoundary <= attribute < upperBoundary\n                upperBoundary.subtract(1, 'milliseconds');\n\n                // Set filter for each vector layer\n                for (var l in config.timemanagerLayers){\n                    filter = buildDateFilter(config.timemanagerLayers[l], lowerBoundary, upperBoundary);\n                    lizMap.triggerLayerFilter(l, filter);\n                }\n            }\n\n\n\n            function moveNext(){\n                var nextLowerBoundary = getSideDate(\n                    tmCurrentDate, tmTimeFrameSize, tmTimeFrameType, 1, 1\n                );\n\n                if (nextLowerBoundary.startOf(tmTimeFrameType.slice(0, -1)) <= tmEndDate.startOf(tmTimeFrameType.slice(0, -1))) {\n                    var lowerBoundary = null;\n                    var upperBoundary = null;\n                    // Change lower boundary\n                    lowerBoundary = nextLowerBoundary;\n                    // Change upper boundary\n                    upperBoundary = getSideDate(\n                        tmCurrentDate, tmTimeFrameSize, tmTimeFrameType, 2, 1\n                    );\n\n                    updateStep(lowerBoundary, upperBoundary);\n\n                } else {\n                    // Go back to first step\n                    stopAnimation(true);\n                    // Make sure to trigger filter for slider position\n                    onSliderStop();\n                }\n            }\n\n            function movePrev() {\n                var prevLowerBoundary = getSideDate(\n                    tmCurrentDate, tmTimeFrameSize, tmTimeFrameType, 1, -1\n                );\n                if (prevLowerBoundary.startOf(tmTimeFrameType.slice(0, -1)) >= tmStartDate.startOf(tmTimeFrameType.slice(0, -1))) {\n                    var lowerBoundary = null;\n                    var upperBoundary = null;\n                    // Change lower boundary\n                    lowerBoundary = prevLowerBoundary;\n                    // Change upper boundary\n                    upperBoundary = moment(tmCurrentDate);\n\n                    updateStep(lowerBoundary, upperBoundary);\n\n                } else {\n                    stopAnimation(true);\n                    // Make sure to trigger filter for slider position\n                    onSliderStop();\n                }\n            }\n\n            // Display/hide the span containing the next time value\n            function toggleNextSpan() {\n                var hideNextSpan = ($('#tmCurrentValue').text() == $('#tmNextValue').text());\n                $('#tmNextValue').toggle(!hideNextSpan);\n                $('#tmNextValue').prev(\"span\").toggle(!hideNextSpan);\n            }\n\n            function updateStep(lowerBoundary, upperBoundary) {\n                // Set layers filter\n                setLayersFilter(lowerBoundary, upperBoundary);\n\n                // Change global values\n                tmCurrentDate = moment(lowerBoundary);\n\n                // Display\n                $('#tmCurrentValue').html(formatDatetime(tmCurrentDate, tmTimeFrameType));\n                $('#tmNextValue').html(formatDatetime(moment(upperBoundary), tmTimeFrameType));\n                toggleNextSpan();\n                $(\"#tmSlider\").slider( \"option\", \"value\", tmCurrentDate.valueOf() );\n            }\n\n            function onSliderUpdate() {\n                var sliderVal = $(\"#tmSlider\").slider( \"option\", \"value\" );\n            }\n\n            function setSliderStep(sliderDate, type){\n                if (type == 'seconds') sliderDate = sliderDate.set( {'millisecond' : 0} );\n                if (type == 'minutes') sliderDate = sliderDate.set( {'second' : 0});\n                if (type == 'hours') sliderDate = sliderDate.set( {'minute' : 0});\n                if (type == 'days') sliderDate = sliderDate.set( {'hour' : 0});\n                if (type == 'weeks') sliderDate = sliderDate.day(1); // Monday ( TODO : make it locale aware ?)\n                if (type == 'months') sliderDate = sliderDate.set( {'day' : 1});\n                if (type == 'years') {\n                    sliderDate.set( {'month' : 0});\n                }\n                return sliderDate;\n            }\n\n            function onSliderStop() {\n                // Get slider data\n                var sliderVal = $(\"#tmSlider\").slider( \"option\", \"value\" );\n                var sliderDate = moment(sliderVal);\n\n                // Get nearest step depending on frame type (hour, year, etc.)\n                sliderDate = sliderDate.startOf(tmTimeFrameType.slice(0, -1))\n\n                // set new boundaries\n                var lowerBoundary = sliderDate;\n                var upperBoundary = getSideDate(\n                    lowerBoundary, tmTimeFrameSize, tmTimeFrameType, 1, 1\n                );\n\n                updateStep(lowerBoundary, upperBoundary);\n            }\n\n\n            function stopAnimation(reset) {\n                // Deactivate javascript timer\n                window.clearInterval(tmAnimationTimer);\n                tmAnimationTimer = null;\n\n                // Change button label to play\n                $('#tmTogglePlay').html(lizDict['timemanager.toolbar.play']);\n\n                // Reset current date to startDate if reset asked\n                if (reset === true) {\n                    tmCurrentDate = moment( tmStartDate );\n                    $('#tmCurrentValue').html(formatDatetime(tmCurrentDate, tmTimeFrameType));\n                    $(\"#tmSlider\").slider( \"option\", \"value\", tmCurrentDate.valueOf() );\n                    var upperBoundary = getSideDate(\n                        tmCurrentDate, tmTimeFrameSize, tmTimeFrameType, 1, 1\n                    );\n                    $('#tmNextValue').html(formatDatetime(upperBoundary, tmTimeFrameType));\n                    toggleNextSpan();\n                }\n            }\n\n            function unFilterTimeLayers() {\n                // Remove filter\n                for(var layerName in lizMap.config.timemanagerLayers){\n                    lizMap.deactivateMaplayerFilter(layerName);\n                    // Refresh plots and popups\n                    lizMap.config.layers[layerName]['request_params']['filtertoken'] = null;\n                    lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                        {\n                            'featureType': layerName,\n                            'filter': null,\n                            'updateDrawing': false\n                        }\n                    );\n                }\n            }\n\n            function formatDatetime(mytime, timeResolution){\n                var myDate = moment(mytime);\n                var dString = null;\n                switch(timeResolution){\n                    case 'milliseconds': dString = 'YYYY-MM-DD HH:mm:ss';break;\n                    case 'seconds': dString = 'YYYY-MM-DD HH:mm:ss';break;\n                    case 'minutes': dString = 'YYYY-MM-DD HH:mm:00';break;\n                    case 'hours': dString = 'YYYY-MM-DD HH:00';break;\n                    case 'days': dString = 'YYYY-MM-DD';break;\n                    case 'weeks': dString = 'YYYY-MM-DD';break;\n                    case 'months': dString = 'YYYY-MM';break;\n                    case 'years': dString = 'YYYY';break;\n                }\n                return myDate.format(dString);\n            }\n\n        }\n    });\n\n\n}();\n"],"names":["lizMap","events","on","evt","tmLayersNumber","config","tmActive","layers","tmLayersDataFetched","Object","keys","timemanagerLayers","length","$","click","minidockopened","e","id","show","minTime","Infinity","maxTime","l","getDataFromLayer","mi","ma","layerMinTime","moment","startOf","tmTimeFrameType","slice","layerMaxTime","endOf","tmStartDate","tmEndDate","tmCurrentDate","html","formatDatetime","toggleNextSpan","slider","min","valueOf","max","value","loadTimemanager","onSliderStop","activateTimemanager","minidockclosed","stopAnimation","hide","layerName","deactivateMaplayerFilter","triggerEvent","unFilterTimeLayers","tmAnimationTimer","filter","tmTimeFrameSize","options","tmAnimationFrameLength","layerConfig","aCallback","fieldnameContent","startAttribute","endAttribute","min_timestamp","max_timestamp","dmin","dmax","sdata","request","layerId","fieldname","get","filterConfigData","url","result","console","log","title","detail","a","feat","getSideDate","curDate","timeFrameSize","timeFrameType","factor","fDirection","returnVal","addValue","add","ready","buildDateFilter","min_val","max_val","filters","startField","endField","attributeResolution","Date","parse","f_min","push","f_max","join","moveNext","nextLowerBoundary","updateStep","hideNextSpan","text","toggle","prev","lowerBoundary","upperBoundary","subtract","triggerLayerFilter","setLayersFilter","sliderVal","sliderDate","reset","window","clearInterval","lizDict","mytime","timeResolution","myDate","dString","format","event","ui","this","setInterval","startAnimation","prevLowerBoundary"],"sourceRoot":""}