{"version":3,"file":"../../lizmap/www/assets/js/attributeTable.js","mappings":"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","sources":["webpack://assets/./src/legacy/attributeTable.js"],"sourcesContent":["var lizAttributeTable = function() {\n\n    lizMap.events.on({\n        'uicreated':function(evt){\n\n            // Attributes\n            var config = lizMap.config;\n            var layers = lizMap.layers;\n            var hasAttributeTableLayers = false;\n            var attributeLayersActive = false;\n            var attributeLayersDic = {};\n            var wfsTypenameMap = {};\n            var mediaLinkPrefix = OpenLayers.Util.urlAppend(lizUrls.media\n              ,OpenLayers.Util.getParameterString(lizUrls.params)\n            )\n            var startupFilter = false;\n            if( !( typeof lizLayerFilter === 'undefined' ) ){\n                startupFilter = true;\n                lizMap.lizmapLayerFilterActive = true;\n            }\n\n            var limitDataToBbox = false;\n            if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                limitDataToBbox = true;\n            }\n\n            if (!('attributeLayers' in config))\n                return -1;\n\n            // Verifying WFS layers\n            var featureTypes = lizMap.getVectorLayerFeatureTypes();\n            if (featureTypes.length == 0 )\n                return -1;\n\n            $('body').css('cursor', 'wait');\n\n            // Sort attribute layers as given by creation order in Lizmap plugin\n            var attributeLayersSorted = [];\n\n            for (var lname in config.attributeLayers) {\n                var al = config.attributeLayers[lname];\n                al.name = lname;\n                attributeLayersSorted.push(al);\n            }\n            attributeLayersSorted.sort(function(a, b) {\n                return a.order - b.order;\n            });\n\n            for (var i = 0; i < attributeLayersSorted.length; i++) {\n                var al = attributeLayersSorted[i];\n                attributeLayersDic[lizMap.cleanName(al.name)] = al.name;\n            }\n\n            for(const featureType of featureTypes) {\n                // typename\n                var typeName = featureType.getElementsByTagName('Name')[0].textContent;\n                // layername\n                var layername = lizMap.getNameByTypeName( typeName );\n                if ( !layername || layername == undefined )\n                    continue;\n                // lizmap internal js cleaned name\n                var cleanName = lizMap.cleanName(layername);\n                // lizmap config file layer name\n                var configLayerName = attributeLayersDic[cleanName];\n                // Add matching between wfs type name and clean name\n                wfsTypenameMap[cleanName] = typeName;\n\n                if (configLayerName in config.attributeLayers) {\n                    hasAttributeTableLayers = true;\n\n                    // Get layers config information\n                    var atConfig = config.attributeLayers[configLayerName];\n\n                    // Add some properties to the lizMap.config\n                    config.layers[configLayerName]['features'] = {};\n                    config.layers[configLayerName]['featureCrs'] = null;\n                    config.layers[configLayerName]['featuresFullSet'] = false;\n                    config.layers[configLayerName]['selectedFeatures'] = [];\n                    config.layers[configLayerName]['highlightedFeature'] = null;\n                    config.layers[configLayerName]['filteredFeatures'] = [];\n                    config.layers[configLayerName]['request_params'] = {\n                        'filter' : null,\n                        'exp_filter': null,\n                        'selection': null\n                    };\n\n                    // Get existing filter if exists (via permalink)\n                    var layer = lizMap.map.getLayersByName(cleanName)[0];\n\n                    if( layer\n                        && 'FILTER' in layer.params\n                        && layer.params['FILTER']\n                    ){\n\n                        config.layers[configLayerName]['request_params']['filter'] = layer.params['FILTER'];\n\n                        // Send signal so that getFeatureInfo takes it into account\n                        lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                            {\n                                'featureType': attributeLayersDic[cleanName],\n                                'filter': config.layers[configLayerName]['request_params']['filter'],\n                                'updateDrawing': false\n                            }\n                        );\n                    }\n\n                    // Add geometryType if not already present (backward compatibility)\n                    if( typeof config.layers[configLayerName]['geometryType'] === 'undefined' ) {\n                        config.layers[configLayerName]['geometryType'] = 'unknown';\n                    }\n\n                    config.layers[configLayerName]['crs'] = featureType.getElementsByTagName('SRS')[0].textContent;\n\n                    if (config.layers[configLayerName]['crs'] !== \"\"){\n                        lizMap.loadProjDefinition(config.layers[configLayerName].crs, function (aProj) {\n                            new OpenLayers.Projection(config.layers[configLayerName].crs);\n                        });\n                    }\n\n                    var bbox = featureType.getElementsByTagName('LatLongBoundingBox')[0];\n                    atConfig['bbox'] = [\n                        parseFloat(bbox.getAttribute('minx'))\n                        , parseFloat(bbox.getAttribute('miny'))\n                        , parseFloat(bbox.getAttribute('maxx'))\n                        , parseFloat(bbox.getAttribute('maxy'))\n                    ];\n                }\n            }\n\n            if (hasAttributeTableLayers) {\n                // Attribute table could be activated to get selection tool\n                var hasDiplayedAttributeTable = false;\n\n                // Add the list of layers in the summary table\n                var tHtml = '<table id=\"attribute-layer-list-table\" class=\"table table-condensed table-hover table-striped\" style=\"width:auto;\">';\n                for( var idx in attributeLayersDic) {\n                    var cleanName = idx;\n\n                    // Do not add a button for the pivot tables\n                    if( 'pivot' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['pivot'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    // Do not add a button if not asked by editor\n                    if( 'hideLayer' in config.attributeLayers[ attributeLayersDic[ cleanName ] ]\n                        && config.attributeLayers[ attributeLayersDic[ cleanName ] ]['hideLayer'] == 'True'\n                    ){\n                        continue;\n                    }\n\n                    var title = config.layers[ attributeLayersDic[ cleanName ] ][ 'title' ];\n                    tHtml+= '<tr>';\n                    tHtml+= '   <td>' + title + '</td><td><button value=' + cleanName + ' class=\"btn btn-open-attribute-layer\">'+ lizDict['attributeLayers.toolbar.btn.detail'] +'</button></td>';\n                    tHtml+= '</tr>';\n\n                    hasDiplayedAttributeTable = true;\n                }\n\n                tHtml+= '</table>';\n                if ( hasDiplayedAttributeTable ) {\n                    $('#attribute-layer-list').html(tHtml);\n\n                    // Bind click on detail buttons\n                    $('button.btn-open-attribute-layer')\n                    .click(function(){\n                        var cleanName = $(this).val();\n\n                        // Disable attribute table if limitDataToBbox and layer not visible in map\n                        if(limitDataToBbox){\n                            var layer = lizMap.map.getLayersByName( cleanName )[0];\n                            var ms = lizMap.map.getScale();\n                            if( layer ) {\n                                var lvisibility = layer.maxScale < ms && ms < layer.minScale;\n                                if( !lvisibility ){\n                                    var msg = lizDict['attributeLayers.msg.layer.not.visible'];\n                                    lizMap.addMessage( msg, 'info', true).attr('id','lizmap-attribute-message');\n                                    return false;\n                                }\n                            }\n                        }\n\n                        // Add Div if not already there\n                        const layerName = attributeLayersDic[cleanName];\n                        if( !$('#nav-tab-attribute-layer-' + cleanName ).length ){\n                            addLayerDiv(layerName);\n                        }\n\n                        const layerFilter = ( 'request_params' in config.layers[layerName] && config.layers[layerName]['request_params']['exp_filter'] ) ?\n                            config.layers[layerName]['request_params']['exp_filter'] : null;\n\n                        const tableSelector = '#attribute-layer-table-' + cleanName;\n\n                        // Get data and fill attribute table\n                        getDataAndFillAttributeTable(layerName, layerFilter, tableSelector);\n\n                        $('#nav-tab-attribute-layer-' + cleanName + ' a' ).tab('show');\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n\n                    // Bind change on options checkboxes\n                    $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').change(function(){\n                        var doCascade = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                        // refresh filtered layers if any active\n                        if( lizMap.lizmapLayerFilterActive ){\n                            var featureType = lizMap.lizmapLayerFilterActive;\n                            var layerConfig = config.layers[featureType];\n                            if( layerConfig['filteredFeatures'] ){\n\n                                // Update attribute table tools\n                                updateAttributeTableTools( featureType );\n\n                                // Update layer\n                                var cascadeToChildren = true;\n                                if( !doCascade )\n                                    cascadeToChildren = 'removeChildrenFilter';\n                                updateMapLayerDrawing( featureType, cascadeToChildren );\n\n                            }\n                        }\n                    });\n                } else {\n                    // Hide navbar menu\n                    $('#mapmenu li.attributeLayers').hide();\n                }\n\n                // Send signal\n                lizMap.events.triggerEvent(\"attributeLayersReady\",\n                  {'layers': attributeLayersDic}\n                );\n\n                // Map events\n                function warnExtent() {\n                    var btitle = lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip.changed'];\n                    btitle += ' ' + lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'];\n                    $('button.btn-refresh-table')\n                        .attr('data-original-title', btitle)\n                        .addClass('btn-warning')\n                        .tooltip()\n                        ;\n                }\n                if (limitDataToBbox) {\n                    lizMap.map.events.on({\n                        moveend: function () {\n                            warnExtent();\n                        }\n                    });\n                }\n\n                // Bind click on tabs to resize datatable tables\n                $('#attributeLayers-tabs li').click(function(){\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                });\n\n            } else {\n                // Hide navbar menu\n                $('#mapmenu li.attributeLayers').hide();\n                return -1;\n            }\n            $('body').css('cursor', 'auto');\n\n            function getDataAndFillAttributeTable(layerName, filter, tableSelector, callBack){\n\n                let layerConfig = lizMap.config.layers[layerName];\n                const typeName = layerConfig.typename;\n\n                const wfsParams = {\n                    TYPENAME: typeName,\n                    GEOMETRYNAME: 'extent'\n                };\n\n                if(filter){\n                    wfsParams['EXP_FILTER'] = filter;\n                }\n\n                // Calculate bbox from map extent if needed\n                if (config.options?.limitDataToBbox == 'True') {\n                    wfsParams['BBOX'] = lizMap.mainLizmap.map.getView().calculateExtent();\n                    wfsParams['SRSNAME'] = lizMap.mainLizmap.map.getView().getProjection().getCode();\n                }\n\n                const getFeatureRequest = lizMap.mainLizmap.wfs.getFeature(wfsParams);\n\n                let fetchRequests = [getFeatureRequest];\n                let namedRequests = {'getFeature': fetchRequests.length-1};\n\n\n                if (!(layerConfig?.['alias'] && layerConfig?.['types'])) {\n                    const describeFeatureTypeRequest = lizMap.mainLizmap.wfs.describeFeatureType({\n                        TYPENAME: typeName\n                    });\n                    fetchRequests.push(describeFeatureTypeRequest);\n                    namedRequests['describeFeatureType'] = fetchRequests.length-1;\n                }\n\n                const allColumnsKeyValues = {};\n\n                // Indexes 0 and 1 are use for getFeature and describeFeature requests\n                namedRequests['keyValues'] = fetchRequests.length+0;\n                let responseOrder = fetchRequests.length+0;\n                for (const fieldName in lizMap.keyValueConfig?.[layerName]) {\n                    const fieldConf = lizMap.keyValueConfig[layerName][fieldName];\n                    if (fieldConf.type == 'ValueMap') {\n                        allColumnsKeyValues[fieldName] = fieldConf.data;\n                    } else {\n                        // Get the layer typename based on its id\n                        let getSourceLayer = lizMap.getLayerConfigById(fieldConf.source_layer_id);\n                        if( !getSourceLayer || getSourceLayer.length != 2) continue;\n                        let source_typename = getSourceLayer[1].typename;\n                        if (source_typename == undefined) {\n                            // The source layer is not published in WFS\n                            continue;\n                        }\n                        // Use an integer as a placeholder for coming fetched key/values\n                        allColumnsKeyValues[fieldName] = responseOrder;\n                        responseOrder++;\n                        fetchRequests.push(lizMap.mainLizmap.wfs.getFeature({\n                            TYPENAME: source_typename,\n                            PROPERTYNAME: fieldConf.code_field + ',' + fieldConf.label_field,\n                            // we must not use null for exp_filter but '' if no filter is active\n                            EXP_FILTER: fieldConf.exp_filter ? fieldConf.exp_filter : ''\n                        }));\n                    }\n                }\n\n                document.body.style.cursor = 'progress';\n                Promise.all(fetchRequests).then(responses => {\n\n                    // Get every key/value from relation layers\n                    for (let index = namedRequests['keyValues']; index < responses.length; index++) {\n                        // Get column name using order placeholder defined before\n                        const columnName = Object.keys(allColumnsKeyValues).find(key => allColumnsKeyValues[key] === index);\n                        const keyField = lizMap.keyValueConfig[layerName][columnName].code_field;\n                        const valueField = lizMap.keyValueConfig[layerName][columnName].label_field;\n\n                        const keyValue = {};\n\n                        responses[index].features.forEach(feature => keyValue[feature.properties[keyField]] = feature.properties[valueField]);\n\n                        allColumnsKeyValues[columnName] = keyValue;\n\n                    }\n                    layerConfig['featureCrs'] = 'EPSG:4326';\n                    if (namedRequests?.['describeFeatureType']) {\n                        const describeFeatureTypeResponse = responses[namedRequests['describeFeatureType']];\n                        layerConfig['aliases'] = describeFeatureTypeResponse.aliases;\n                        layerConfig['types'] = describeFeatureTypeResponse.types;\n                        layerConfig['columns'] = describeFeatureTypeResponse.columns;\n                    }\n                    buildLayerAttributeDatatable(layerName, tableSelector, responses[0].features, layerConfig.aliases, layerConfig.types, allColumnsKeyValues, callBack);\n\n                    document.body.style.cursor = 'default';\n                }).catch(() => {\n                    document.body.style.cursor = 'default';\n                });\n            }\n\n            function getDataAndRefreshAttributeTable(layerName, filter, tableSelector, callBack){\n\n                const typeName = lizMap.config.layers[layerName].typename;\n\n                const wfsParams = {\n                    TYPENAME: typeName,\n                    GEOMETRYNAME: 'extent'\n                };\n\n                if(filter){\n                    wfsParams['EXP_FILTER'] = filter;\n                }\n\n                // Calculate bbox from map extent if needed\n                if (config.options?.limitDataToBbox == 'True') {\n                    wfsParams['BBOX'] = lizMap.mainLizmap.map.getView().calculateExtent();\n                    wfsParams['SRSNAME'] = lizMap.mainLizmap.map.getView().getProjection().getCode();\n                }\n\n                const getFeatureRequest = lizMap.mainLizmap.wfs.getFeature(wfsParams);\n                Promise.all([getFeatureRequest]).then(responses => {\n                    refreshLayerAttributeDatatable(layerName, tableSelector, responses[0].features);\n                    document.body.style.cursor = 'default';\n                }).catch(() => {\n                    document.body.style.cursor = 'default';\n                });\n            }\n\n            function activateAttributeLayers() {\n                attributeLayersActive = true;\n\n                // Deactivate locate-menu\n                if ( $('#locate-menu').is(':visible') && lizMap.checkMobile()){\n                    $('#toggleLocate').parent().removeClass('active');\n                    $('#locate-menu').toggle();\n                }\n                return false;\n            }\n\n            function deactivateAttributeLayers() {\n                // Some actions done when deactivating attribute table\n                return false;\n            }\n\n            function getRelationInfo(parentLayerId,childLayerId){\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for( var lridx in layerRelations ) {\n                        var relation = layerRelations[lridx];\n                        if (relation.referencingLayer == childLayerId) {\n                            return relation;\n                        }\n                    }\n                }\n                return null;\n            }\n\n            function addLayerDiv(lname) {\n                // Get layer config\n                var atConfig = config.attributeLayers[lname];\n                var cleanName = lizMap.cleanName(lname);\n\n                // Add li to the tabs\n                var liHtml = '<li id=\"nav-tab-attribute-layer-' + cleanName + '\">';\n                liHtml+= '<a href=\"#attribute-layer-' + cleanName + '\" data-toggle=\"tab\">' + config.layers[lname]['title'] ;\n                liHtml+= '&nbsp;<i class=\"btn-close-attribute-tab icon-remove icon-white\" style=\"cursor:pointer\"></i>';\n                liHtml+= '</a>'\n                liHtml+= '</li>';\n\n                $('#attributeLayers-tabs').append( liHtml );\n\n                // Add content div\n                var html = '<div id=\"attribute-layer-' + cleanName + '\" class=\"tab-pane attribute-content bottom-content\" >';\n                html+= '    <div class=\"attribute-layer-main\" id=\"attribute-layer-main-' + cleanName + '\" >';\n\n                if( !config.layers[lname]['selectedFeatures'] )\n                    config.layers[lname]['selectedFeatures'] = [];\n                if( !config.layers[lname]['filteredFeatures'] )\n                    config.layers[lname]['filteredFeatures'] = [];\n\n                var selClass= '';\n                if( config.layers[lname]['selectedFeatures'].length == 0 )\n                    selClass= ' hidden';\n                var filClass= '';\n                if( config.layers[lname]['filteredFeatures'].length > 0 )\n                    filClass= ' active btn-primary';\n                else\n                    filClass = selClass\n\n                // Action bar specific to the tab\n                html+= '<div class=\"attribute-layer-action-bar\">';\n\n                // Search input\n                html+= '<div class=\"btn-group\">';\n                html+= '  <input id=\"attribute-layer-search-' + cleanName + '\" type=\"search\" class=\"form-control\" placeholder=\"'+lizDict['attributeLayers.toolbar.input.search.title']+'\">';\n                html+= '  <i class=\"clear-layer-search icon-remove\" style=\"position:absolute;right:4px;top:4px;cursor:pointer;\"></i>';\n                html+= '</div>';\n\n                // Selected searched lines button\n                html+= '<button class=\"btn-select-searched btn btn-mini\" value=\"'+cleanName+'\" title=\"'+lizDict['attributeLayers.toolbar.btn.select.searched.title']+'\"><i class=\"icon-star\"></i></button>';\n\n                // Unselect button\n                html+= '    <button class=\"btn-unselect-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.unselect.title']+'\"><i class=\"icon-star-empty\"></i></button>';\n\n                // 'Move selected to top' button\n                html+= '    <button class=\"btn-moveselectedtotop-attributeTable btn btn-mini' + selClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.moveselectedtotop.title']+'\"><i class=\"icon-arrow-up\"></i></button>';\n\n                // Filter button : only if no filter applied at startup\n                if( !startupFilter\n                    && ( !lizMap.lizmapLayerFilterActive || lizMap.lizmapLayerFilterActive == lname )\n                ){\n                    html+= '    <button class=\"btn-filter-attributeTable btn btn-mini' + filClass + '\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.filter.title']+'\"><i class=\"icon-filter\"></i></button>';\n                }\n\n                // Invert selection\n                html += '<lizmap-selection-invert tooltip-placement=\"bottom\" feature-type=\"' + cleanName +'\"></lizmap-selection-invert>'\n\n                // Detail button\n                var canPopup = false\n                if( config.layers[lname]\n                    && config.layers[lname]['popup'] == 'True'\n                    && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    canPopup = true;\n                }\n                if( canPopup ){\n                    html+= '<button type=\"checkbox\" class=\"btn-detail-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.cb.data.detail.title']+'\">';\n                    html+= '<i class=\"icon-info-sign\"></i>';\n                    html+= '</button>';\n                }\n\n                // Create button\n                var canCreate = false;\n                if( 'editionLayers' in config && cleanName in config.editionLayers ) {\n                    var al = config.editionLayers[attributeLayersDic[cleanName]];\n                    if( al.capabilities.createFeature == \"True\" )\n                        canCreate = true;\n                }\n                if( canCreate ){\n                    html+= '    <button class=\"btn-createFeature-attributeTable btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.data.createFeature.title']+'\"><i class=\"icon-plus-sign\"></i></button>';\n                }\n\n                // Refresh button (if limitDataToBbox is true)\n                if( limitDataToBbox\n                    && config.layers[lname]['geometryType'] != 'none'\n                    && config.layers[lname]['geometryType'] != 'unknown'\n                ){\n                    // Add button to refresh table\n                    html+= '    <button class=\"btn-refresh-table btn btn-mini\" value=\"' + cleanName + '\" title=\"'+lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip']+'\">'+lizDict['attributeLayers.toolbar.btn.refresh.table.title']+'</button>';\n\n                }\n\n                // Get children content\n                var childHtml = getChildrenHtmlContent( lname );\n                var alc='';\n\n                // Toggle children content\n                if( childHtml ){\n                    // Add button to show/hide children tables\n                    html+= '    <button class=\"btn-toggle-children btn btn-mini\" value=\"' + cleanName + '\" >'+lizDict['attributeLayers.toolbar.btn.toggle.children.title']+'</button>';\n\n                    // Add buttons to create new children\n                    if( childHtml['childCreateButton'] )\n                        html+= childHtml['childCreateButton'];\n\n                    // Add buttons to link parent and children\n                    if( childHtml['layerLinkButton'] )\n                        html+= childHtml['layerLinkButton'];\n                }\n\n                // Export tools\n                if ( 'exportLayers' in config.options && config.options.exportLayers == 'True' ) {\n                    html+= '&nbsp;<div class=\"export-formats btn-group pull-right\" role=\"group\" >';\n                    html+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                    html+= lizDict['attributeLayers.toolbar.btn.data.export.title'];\n                    html+= '      <span class=\"caret\"></span>';\n                    html+= '    </button>';\n                    html+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GeoJSON</a></li>';\n                    html+= '        <li><a href=\"#\" class=\"btn-export-attributeTable\">GML</a></li>';\n                    var exportFormats = lizMap.getVectorLayerResultFormat();\n                    for ( var i=0, len=exportFormats.length; i<len; i++ ) {\n                        var format = exportFormats[i].toLowerCase();\n                        if ( format != 'gml2' && format != 'gml3' && format != 'geojson' ) {\n                            html += '        <li><a href=\"#\" class=\"btn-export-attributeTable\">'+format+'</a></li>';\n                        }\n                    }\n                    html+= '    </ul>';\n                    html+= '</div>';\n                }\n\n                html+= '</div>'; // attribute-layer-action-bar\n\n                if( childHtml )\n                    alc= ' showChildren';\n                html+= '<div class=\"attribute-layer-content'+alc+'\">';\n                html+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+cleanName+'\">';\n                html+= '    <table id=\"attribute-layer-table-' + cleanName + '\" class=\"attribute-table-table table table-hover table-condensed table-striped order-column cell-border\" width=\"100%\"></table>';\n\n                html+= '</div>';  // attribute-layer-content\n\n                // Add children content\n                if( childHtml ){\n                    // Add children content : one tab per childlayer\n                    html+= '<div class=\"tabbable attribute-layer-child-content\">';\n                    // Ul content\n                    html+= '    <ul class=\"nav nav-tabs\">';\n                    for( var i in childHtml['tab-li'] ){\n                        var cLi = childHtml['tab-li'][i];\n                        html+= cLi;\n                    }\n                    html+= '    </ul>';\n                    html+= '    <div class=\"tab-content\">';\n                    // Tab content\n                    for( var i in childHtml['tab-content'] ){\n                        var cDiv = childHtml['tab-content'][i];\n                        html+= cDiv;\n                    }\n                    html+= '    </div>'; // tab-content\n                    html+= '</div>'; // tabbable\n                }\n\n                html+= '</div>';  // attribute-layer-main\n\n                // Right panel to show info\n                html+= '    <div class=\"attribute-layer-feature-panel\" id=\"attribute-table-panel-' + cleanName + '\" ></div>';\n\n                html+= '</div>'; // 'attribute-layer-' + cleanName\n\n                $('#attribute-table-container').append(html);\n\n                $('#attribute-layer-' + cleanName + ' button').tooltip( {\n                    placement: 'bottom'\n                } );\n\n                $('.btn-close-attribute-tab').click(function(){\n                    //there are multiple elements which has .closeTab icon so close the tab whose close icon is clicked\n                    var tabContentId = $(this).parent().attr(\"href\");\n                    $(this).parent().parent().remove(); //remove li of tab\n                    $('#attributeLayers-tabs a:last').tab('show'); // Select first tab\n                    $(tabContentId).remove(); //remove respective tab content\n                });\n\n                if( childHtml ){\n\n                   // Bind adjust child columns when children tab visibility change\n                    $('#attribute-layer-' + cleanName + ' div.attribute-layer-child-content ul li a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\n                        var target = $(e.target).attr(\"href\") // activated tab\n                        var dtable = $(target).find('table.dataTable');\n                        dtable.DataTable().tables().columns.adjust();\n                    });\n                }\n\n                if(limitDataToBbox){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-refresh-table')\n                    .click(function(){\n                        // Reset button tooltip & style\n                        $(this)\n                        .attr('data-original-title', lizDict['attributeLayers.toolbar.btn.refresh.table.tooltip'])\n                        .removeClass('btn-warning');\n\n                        // Disable if the layer is not visible\n                        var layer = lizMap.map.getLayersByName( cleanName )[0];\n                        var ms = lizMap.map.getScale();\n                        if( layer ) {\n                            var lvisibility = layer.maxScale < ms && ms < layer.minScale;\n                            if( !lvisibility ){\n                                var msg = lizDict['attributeLayers.msg.layer.not.visible'];\n                                lizMap.addMessage( msg, 'info', true).attr('id','lizmap-attribute-message');\n                                return false;\n                            }\n                        }else{\n                            // do nothing if no layer found\n                            return false;\n                        }\n\n                        // Refresh table\n                        const tableSelector = '#attribute-layer-table-'+cleanName;\n                        $('#attribute-layer-main-'+cleanName+' > div.attribute-layer-content').hide();\n\n                        getDataAndFillAttributeTable(lname, null, tableSelector, () => {\n                            $('#attribute-layer-main-' + cleanName + ' > div.attribute-layer-content').show();\n                            refreshDatatableSize('#attribute-layer-main-' + cleanName);\n                        });\n\n                        return false;\n                    })\n                    .hover(\n                        function(){ $(this).addClass('btn-primary'); },\n                        function(){ $(this).removeClass('btn-primary'); }\n                    );\n                }\n\n                if( childHtml ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-toggle-children')\n                    .click(function(){\n                        var parentDir = $(this).parents('div.attribute-layer-main');\n                        parentDir.find('div.attribute-layer-content').toggleClass('showChildren');\n                        parentDir.find('div.tabbable.attribute-layer-child-content').toggle();\n                        // Refresh parent table size\n                        refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                        return false;\n                    });\n                }\n\n                // Bind click on detail button\n                if( canPopup ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-detail-attributeTable')\n                    .click(function(){\n                        // Toggle\n                        $('#attribute-layer-main-' + cleanName).toggleClass('reduced', !$(this).hasClass('btn-primary'));\n                        $('#attribute-table-panel-' + cleanName).toggleClass('visible', !$(this).hasClass('btn-primary'));\n                        $(this).toggleClass('btn-primary');\n\n                        refreshDatatableSize('#attribute-layer-main-'+ cleanName);\n                        return false;\n                    });\n                }\n\n                // Bind click on \"unselect all\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-unselect-attributeTable')\n                .click(function(){\n                    var aName = attributeLayersDic[ $(this).val() ];\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                        { 'featureType': aName, 'updateDrawing': true}\n                    );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on \"move selected to top\" button\n                $('#attribute-layer-'+ cleanName + ' button.btn-moveselectedtotop-attributeTable')\n                .click(function(){\n                    var aTable = '#attribute-layer-table-' + $(this).val();\n                    var dTable = $( aTable ).DataTable();\n                    var previousOrder = dTable.order();\n                    previousOrder = $.grep(previousOrder, function(o){\n                        return o[0] != 0;\n                    });\n                    var selectedOrder = [ [0, 'asc'] ];\n                    var newOrder = selectedOrder.concat(previousOrder);\n                    dTable.order( newOrder ).draw();\n\n                    // Scroll to top\n                    $(aTable).parents('div.attribute-layer-content').scrollTop(0);\n\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n\n                // Bind click on filter button\n                if( !startupFilter ){\n                    $('#attribute-layer-'+ cleanName + ' button.btn-filter-attributeTable')\n                    .click(function(){\n                        var aName = attributeLayersDic[ $(this).val() ];\n                        if( $(this).hasClass('btn-primary') ) {\n                            lizMap.events.triggerEvent( \"layerfeatureremovefilter\",\n                                { 'featureType': aName}\n                            );\n                            lizMap.lizmapLayerFilterActive = null;\n                        } else {\n                            lizMap.events.triggerEvent(\"layerfeaturefilterselected\",\n                                { 'featureType': aName}\n                            );\n                            lizMap.lizmapLayerFilterActive = aName;\n                        }\n                        return false;\n                    });\n                }\n\n                // Bind click on export buttons\n                $('#attribute-layer-'+ cleanName + ' a.btn-export-attributeTable')\n                .click(function(){\n                    var eFormat = $(this).text();\n                    if( eFormat == 'GML' )\n                        eFormat = 'GML3';\n                    var cleanName = $(this).parents('div.attribute-layer-main:first').attr('id').replace('attribute-layer-main-', '');\n                    var eName = attributeLayersDic[ cleanName ];\n                    lizMap.exportVectorLayer( eName, eFormat, limitDataToBbox );\n                    $(this).blur();\n                    return false;\n                });\n\n                // Bind click on createFeature button\n                $('#attribute-layer-'+ cleanName + ' button.btn-createFeature-attributeTable')\n                .click(function(){\n                    if ( $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                        $('#lizmap-edition-message').remove();\n                        lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                        return false;\n                    }\n                    var parentFeatId = document.querySelector('#attribute-layer-'+ cleanName + ' tr.active lizmap-feature-toolbar').fid;\n                    var parentLayerName = attributeLayersDic[ cleanName ];\n                    var parentLayerId = config.layers[parentLayerName]['id'];\n                    var aName = attributeLayersDic[ $(this).val() ];\n                    lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                        var lid = config.layers[aName]['id'];\n                        lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                    });\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on createFeature button via dropDown\n                $('#attribute-layer-'+ cleanName + ' a.btn-createFeature-attributeTable')\n                .click(function(){\n                    if ( $('#attribute-layer-'+ cleanName + ' tr.active').length != 1) {\n                        $('#lizmap-edition-message').remove();\n                        lizMap.addMessage( lizDict['attributeLayers.toolbar.btn.data.createChildFeature.no.actived'], 'info', true).attr('id','lizmap-edition-message');\n                        return false;\n                    }\n                    var parentFeatId = document.querySelector('#attribute-layer-'+ cleanName + ' tr.active lizmap-feature-toolbar').fid;\n                    var parentLayerName = attributeLayersDic[ cleanName ];\n                    var parentLayerId = config.layers[parentLayerName]['id'];\n                    var selectedValue = $(this).attr('href').replace('#', '');\n                    var aName = attributeLayersDic[ selectedValue ];\n                    lizMap.getLayerFeature(parentLayerName, parentFeatId, function(parentFeat) {\n                        var lid = config.layers[aName]['id'];\n                        lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                        $(this).blur();\n                    });\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on linkFeatures button\n                $('#attribute-layer-'+ cleanName + ' a.btn-linkFeatures-attributeTable')\n                .click(function(){\n                    var selectedValue = $(this).attr('href').replace('#', '');\n                    $(this).blur();\n                    var cName = attributeLayersDic[ selectedValue ];\n                    var cId = config.layers[cName]['id'];\n                    var attrConfig = config.attributeLayers[cName];\n                    var p = [];\n                    var pName = attributeLayersDic[cleanName];\n                    var pId = config.layers[pName]['id'];\n                    var doQuery = false;\n\n                    if( 'pivot' in attrConfig\n                        && attrConfig['pivot'] == 'True'\n                        && cId in config.relations.pivot\n                    ){\n                        // Get parents info : layer id, fkey column in the pivot table for the parent, values of primary key for selected ids\n                        for( var parId in config.relations.pivot[cId] ){\n                            var par = buildLinkParameters( parId );\n                            if (!par)\n                                return false;\n                            par['id'] = parId;\n                            var parKey = config.relations.pivot[cId][parId];\n                            par['fkey'] = parKey;\n\n                            // Add parent info to the table\n                            p.push(par);\n\n                        }\n\n                        if( !( p.length == 2 )  )\n                            return false;\n\n                        doQuery = 'pivot';\n\n                    }else{\n\n                        var par = buildLinkParameters( pId );\n                        var chi = buildLinkParameters( cId );\n\n                        if (!par || !chi )\n                            return false;\n                        par['id'] = pId;\n                        // We take the primary key of the child layer (because 1:n relation )\n                        par['fkey'] = config.attributeLayers[cName]['primaryKey'];\n\n                        chi['id'] = cId;\n                        if( !( pId in config.relations ) )\n                            return false;\n                        for( var rp in config.relations[pId] ){\n                            var rpItem = config.relations[pId][rp];\n                            if( rpItem.referencingLayer == cId ){\n                                chi['fkey'] = rpItem.referencingField\n                            }else{\n                                continue;\n                            }\n                        }\n                        if( !('fkey' in chi ) )\n                            return false;\n\n                        p.push(par);\n                        p.push(chi);\n\n                        doQuery = '1n';\n\n                    }\n\n                    if( doQuery ){\n                        var service = OpenLayers.Util.urlAppend(lizUrls.edition\n                            ,OpenLayers.Util.getParameterString(lizUrls.params)\n                        );\n                        $.post(service.replace('getFeature','linkFeatures'),{\n                          features1: p[0]['id'] + ':' + p[0]['fkey'] + ':' + p[0]['selected'].join(),\n                          features2: p[1]['id'] + ':' + p[1]['fkey'] + ':' + p[1]['selected'].join(),\n                          pivot: cId\n\n                        }, function(data){\n                            // Show response message\n                            $('#lizmap-edition-message').remove();\n                            lizMap.addMessage( data, 'info', true).attr('id','lizmap-edition-message');\n\n                            // Unselect features of parent (or child)\n                            // And trigger table refresh\n                            if( doQuery == 'pivot' ){\n                                lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                    { 'featureType': attributeLayersDic[cleanName], 'updateDrawing': true}\n                                );\n                                // Send signal saying edition has been done on pivot\n                                lizMap.events.triggerEvent(\"lizmapeditionfeaturecreated\",\n                                    { 'layerId': cId}\n                                );\n                            }else{\n                                lizMap.events.triggerEvent(\"layerfeatureunselectall\",\n                                    { 'featureType': cName, 'updateDrawing': true}\n                                );\n                                // Send signal saying edition has been done on pivot\n                                lizMap.events.triggerEvent(\"lizmapeditionfeaturemodified\",\n                                    { 'layerId': cId}\n                                );\n                            }\n                        });\n                    }\n\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n\n                // Bind click on btn-select-searched button\n                $('#attribute-layer-'+ cleanName + ' button.btn-select-searched').click(function(){\n                    var aName = attributeLayersDic[ $(this).val() ];\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeatureselectsearched\",\n                        { 'featureType': aName, 'updateDrawing': true}\n                    );\n                    return false;\n                })\n                .hover(\n                    function(){ $(this).addClass('btn-primary'); },\n                    function(){ $(this).removeClass('btn-primary'); }\n                );\n            }\n\n            function buildLinkParameters( layerId ){\n                var lp  = {};\n\n                // Get ids of selected feature\n                var getP = lizMap.getLayerConfigById( layerId, config.attributeLayers, 'layerId' );\n                if( !getP )\n                    return false;\n\n                lp['name'] = getP[0];\n\n                var idSelected = config.layers[ getP[0] ]['selectedFeatures'];\n                if( !( idSelected.length > 0 ) )\n                    return false;\n\n                // Get corresponding values of parent primary key column for these ids\n                var fi = [];\n                var features = config.layers[ getP[0] ]['features'];\n                if ( !features || Object.keys(features).length <= 0 )\n                    return false;\n\n                var primaryKey = getP[1]['primaryKey'];\n                var intRegex = /^[0-9]+$/;\n                for( var x in idSelected ) {\n                    var idFeat = idSelected[x];\n                    var afeat = features[idFeat];\n                    if( typeof afeat === \"undefined\" )\n                        continue;\n                    var pk = afeat.properties[primaryKey];\n                    if( !( intRegex.test(pk) ) )\n                        pk = \" '\" + pk + \"' \";\n                    fi.push( pk );\n                }\n                lp['selected'] = fi;\n\n                return lp;\n            }\n\n            function getChildrenHtmlContent( parentLayerName ) {\n\n                var childHtml = null;\n                var childDiv = [];\n                var childLi = [];\n                var childCreateButton = ''; var childCreateButtonItems = [];\n                var layerLinkButton = ''; var layerLinkButtonItems = [];\n                var lConfig = config.layers[parentLayerName];\n                if ( !lConfig )\n                  return childHtml;\n                var parentLayerId = lConfig['id'];\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    var childCount = 0;\n                    var childActive = 'active';\n                    for( var lid in layerRelations ) {\n                        var relation = layerRelations[lid];\n                        var childLayerConfigA = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n                        if( childLayerConfigA\n                            &&  childLayerConfigA[0] in config.attributeLayers\n                        ){\n                            childCount+=1;\n                            if( childCount > 1)\n                                childActive = '';\n                            var childLayerConfig = childLayerConfigA[1];\n                            var childLayerName = childLayerConfigA[0];\n                            var childAttributeLayerConfig = config.attributeLayers[childLayerName];\n\n                            // Discard if the editor does not want this layer to be displayed in child table\n                            if( 'hideAsChild' in childAttributeLayerConfig && childAttributeLayerConfig['hideAsChild'] == 'True' )\n                                continue;\n\n                            // Build child table id by concatenating parent and child layer names\n                            var tabId = 'attribute-child-tab-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n\n                            // Build Div content for tab\n                            var cDiv = '<div class=\"tab-pane attribute-layer-child-content '+childActive+'\" id=\"'+ tabId +'\" >';\n                            var tId = 'attribute-layer-table-' + lizMap.cleanName(parentLayerName) + '-' + lizMap.cleanName(childLayerName);\n                            var tClass = 'attribute-table-table table table-hover table-condensed table-striped cell-border child-of-' + lizMap.cleanName(parentLayerName);\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-parent-layer\" value=\"'+lizMap.cleanName(parentLayerName)+'\">';\n                            cDiv+= '    <input type=\"hidden\" class=\"attribute-table-hidden-layer\" value=\"'+lizMap.cleanName(childLayerName)+'\">';\n                            cDiv+= '    <table id=\"' + tId  + '\" class=\"' + tClass + '\" width=\"100%\"></table>';\n                            cDiv+= '</div>';\n                            childDiv.push(cDiv);\n\n                            // Build li content for tab\n                            var cLi = '<li id=\"nav-tab-'+ tabId +'\" class=\"'+childActive+'\"><a href=\"#'+ tabId +'\" data-toggle=\"tab\">'+ childLayerConfig.title +'</a></li>';\n                            childLi.push(cLi);\n\n                            // Add create child feature button\n                            var canCreateChild = false;\n                            if( 'editionLayers' in config ){\n                                var editionConfig = lizMap.getLayerConfigById(\n                                    relation.referencingLayer,\n                                    config.editionLayers,\n                                    'layerId'\n                                );\n                                if( childLayerName in config.editionLayers ) {\n                                    var al = config.editionLayers[childLayerName];\n                                    if( al.capabilities.createFeature == \"True\" )\n                                        canCreateChild = true;\n                                }\n                            }\n\n                            if( canCreateChild ){\n                                // Button to create a new child : Useful for both 1:n and n:m relation\n                                childCreateButtonItems.push( '<li><a href=\"#' + lizMap.cleanName(childLayerName) + '\" class=\"btn-createFeature-attributeTable\">' + childLayerConfig.title +'</a></li>' );\n                                layerLinkButtonItems.push( '<li><a href=\"#' + lizMap.cleanName(childLayerName) + '\" class=\"btn-linkFeatures-attributeTable\">' + childLayerConfig.title +'</a></li>' );\n                            }\n                        }\n                    }\n\n                }\n                if( childLi.length ){\n                    if( childCreateButtonItems.length > 0 ){\n                        childCreateButton+= '&nbsp;<div class=\"btn-group\" role=\"group\" >';\n                        childCreateButton+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                        childCreateButton+= lizDict['attributeLayers.toolbar.btn.data.createChildFeature.title'];\n                        childCreateButton+= '      <span class=\"caret\"></span>';\n                        childCreateButton+= '    </button>';\n                        childCreateButton+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                        for( var i in  childCreateButtonItems){\n                            var li = childCreateButtonItems[i];\n                            childCreateButton+= li;\n                        }\n                        childCreateButton+= '    </ul>';\n                        childCreateButton+= '</div>';\n                    }\n                    if( layerLinkButtonItems.length > 0 ){\n                        layerLinkButton+= '&nbsp;<div class=\"btn-group\" role=\"group\" >';\n                        layerLinkButton+= '    <button type=\"button\" class=\"btn btn-mini dropdown-toggle\" data-toggle=\"dropdown\" aria-expanded=\"false\">';\n                        layerLinkButton+= lizDict['attributeLayers.toolbar.btn.data.linkFeatures.title'];\n                        layerLinkButton+= '      <span class=\"caret\"></span>';\n                        layerLinkButton+= '    </button>';\n                        layerLinkButton+= '    <ul class=\"dropdown-menu\" role=\"menu\">';\n                        for( var i in  layerLinkButtonItems){\n                            var li = layerLinkButtonItems[i];\n                            layerLinkButton+= li;\n                        }\n                        layerLinkButton+= '    </ul>';\n                        layerLinkButton+= '</div>';\n                    }\n                    childHtml = {\n                        'tab-content': childDiv,\n                        'tab-li': childLi,\n                        'childCreateButton': childCreateButton,\n                        'layerLinkButton': layerLinkButton\n                    } ;\n                }\n                return childHtml;\n            }\n\n            // Refresh attribute table content for all children of a given layer\n            function refreshChildrenLayersContent( sourceTable, featureType, featId ) {\n                var feat = config.layers[featureType]['features'][featId];\n\n                if(!feat)\n                    return false;\n                var fp = feat.properties;\n\n                var lConfig = config.layers[featureType];\n                if ( !lConfig )\n                  return false;\n                var parentLayerId = lConfig['id'];\n\n                // Refresh recursively for direct children and other parent\n                if( 'relations' in config && parentLayerId in config.relations) {\n                    var layerRelations = config.relations[parentLayerId];\n                    for (const relation of layerRelations ) {\n                        const childLayerConfigA = lizMap.getLayerConfigById(\n                            relation.referencingLayer,\n                            config.layers,\n                            'id'\n                        );\n\n                        // Fill in attribute table for child\n                        // Discard if the editor does not want this layer to be displayed in child table\n                        if( childLayerConfigA\n                            && config.attributeLayers?.[childLayerConfigA[0]]?.['hideAsChild'] == 'False'\n                        ){\n                            const [childLayerName, childLayerConfig] = childLayerConfigA;\n                            // Generate filter\n                            let filter = '';\n                            if( relation.referencingLayer == childLayerConfig.id ){\n                                filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                            }\n\n                            // Get child table id\n                            const childTableSelector = sourceTable.replace(' table:first', '') + '-' + lizMap.cleanName(childLayerName);\n\n                            getDataAndFillAttributeTable(childLayerName, filter, childTableSelector);\n                        }\n                    }\n                }\n            }\n\n            var lizdelay = (function(){\n                var timer = 0;\n                return function(callback, ms){\n                    clearTimeout (timer);\n                    timer = setTimeout(callback, ms);\n                };\n            })();\n\n            function refreshLayerAttributeDatatable(aName, aTable, cFeatures, aCallback) {\n                // Get config\n                var lConfig = config.layers[aName];\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                // Detect if table is parent or child\n                var isChild = true;\n                let parentLayerID = '';\n                if (['#attribute-layer-table-', '#edition-table-'].includes(aTable.replace(cleanName, ''))){\n                    isChild = false;\n                }else{\n                    let parentLayerName = '';\n                    if (aTable.startsWith('#attribute-layer-table-')){\n                        parentLayerName =  aTable.replace('#attribute-layer-table-', '').split('-')[0];\n                    } else if (aTable.startsWith('#edition-table-')) {\n                        parentLayerName = aTable.replace('#edition-table-', '').split('-')[0];\n                    }\n\n                    if(parentLayerName){\n                        parentLayerID = config.layers[parentLayerName]['id'];\n                    }\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                if( cFeatures && cFeatures.length > 0 ){\n                    // Format features for datatable\n                    var ff = formatDatatableFeatures(\n                        cFeatures,\n                        isChild,\n                        hiddenFields,\n                        lConfig['selectedFeatures'],\n                        lConfig['id'],\n                        parentLayerID);\n                    var foundFeatures = ff.foundFeatures;\n                    var dataSet = ff.dataSet;\n\n                    // Datatable configuration\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                        oTable.fnAddData( dataSet );\n                    }\n                    lConfig['features'] = foundFeatures;\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n                } else {\n                    $(aTable).show();\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            function buildLayerAttributeDatatable(aName, aTable, cFeatures, cAliases, cTypes, allColumnsKeyValues, aCallback ) {\n                // Get config\n                var lConfig = config.layers[aName];\n\n                // get cleaned name\n                var cleanName = lizMap.cleanName( aName );\n\n                cAliases = typeof cAliases !== 'undefined' ?  cAliases : null;\n                if( !cAliases ){\n                    cAliases = lConfig['alias'];\n                }\n                for( const key in cAliases){\n                    if(cAliases[key]==\"\"){\n                        cAliases[key]=key;\n                    }\n                }\n\n                // Detect if table is parent or child\n                var isChild = true;\n                let parentLayerID = '';\n                if (['#attribute-layer-table-', '#edition-table-'].includes(aTable.replace(cleanName, ''))){\n                    isChild = false;\n                }else{\n                    let parentLayerName = '';\n                    if (aTable.startsWith('#attribute-layer-table-')){\n                        parentLayerName =  aTable.replace('#attribute-layer-table-', '').split('-')[0];\n                    } else if (aTable.startsWith('#edition-table-')) {\n                        parentLayerName = aTable.replace('#edition-table-', '').split('-')[0];\n                    }\n\n                    if(parentLayerName){\n                        parentLayerID = config.layers[parentLayerName]['id'];\n                    }\n                }\n\n                // Pivot table ?\n                var isPivot = false;\n                if( isChild\n                    && 'pivot' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['pivot'] == 'True'\n                ){\n                    isPivot = true;\n                }\n\n                // Hidden fields\n                var hiddenFields = [];\n                if( aName in config.attributeLayers\n                    && 'hiddenFields' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['hiddenFields']\n                ){\n                    var hf = config.attributeLayers[aName]['hiddenFields'].trim();\n                    hiddenFields = hf.split(/[\\s,]+/);\n                }\n\n                // Check edition capabilities\n                var canEdit = false;\n                var canDelete = false;\n                if( 'editionLayers' in config && aName in config.editionLayers ) {\n                    var al = config.editionLayers[aName];\n                    if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                        canEdit = true;\n                    if( al.capabilities.deleteFeature == \"True\" )\n                        canDelete = true;\n                }\n\n                cFeatures = typeof cFeatures !== 'undefined' ?  cFeatures : null;\n                if( !cFeatures ){\n                    // features is an object, let's transform it to an array\n                    // XXX IE compat: Object.values is not available on IE...\n                    var features = config.layers[aName]['features'];\n                    cFeatures = Object.keys(features).map(function (key) {\n                        return features[key];\n                    });\n                }\n\n                var atFeatures = cFeatures;\n                var dataLength = atFeatures.length;\n\n                if( cFeatures && cFeatures.length > 0 ){\n                    // Create columns for datatable\n                    var cdc = createDatatableColumns(aName, atFeatures, hiddenFields, cAliases, cTypes, allColumnsKeyValues);\n                    var columns = cdc.columns;\n                    var firstDisplayedColIndex = cdc.firstDisplayedColIndex;\n\n                    // Format features for datatable\n                    var ff = formatDatatableFeatures(\n                        atFeatures,\n                        isChild,\n                        hiddenFields,\n                        lConfig['selectedFeatures'],\n                        lConfig['id'],\n                        parentLayerID\n                    );\n                    var foundFeatures = ff.foundFeatures;\n                    var dataSet = ff.dataSet;\n\n                    // Fill in the features object\n                    // only when necessary : object is empty or is not child or (is child and no full features list in the object)\n                    var refillFeatures = false;\n                    var dLen = lConfig['features'] ? Object.keys(lConfig['features']).length : 0;\n                    if( dLen == 0 ){\n                        refillFeatures = true;\n                        if( !isChild ){\n                            lConfig['featuresFullSet'] = true;\n                        }\n                    }\n                    else{\n                        if( isChild ){\n                            if( !lConfig['featuresFullSet'] ){\n                                refillFeatures = true;\n                            }\n                        }else{\n                            lConfig['featuresFullSet'] = true;\n                            refillFeatures = true;\n                        }\n                    }\n                    if( refillFeatures  )\n                        lConfig['features'] = foundFeatures;\n\n                    lConfig['alias'] = cAliases;\n                    // Datatable configuration\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                        oTable.fnAddData( dataSet );\n                    }\n                    else {\n                        // Search while typing in text input\n                        // Deactivate if too many items\n                        var searchWhileTyping = true;\n                        if( dataLength > 50000 )\n                            searchWhileTyping = false;\n\n                        var myDom = '<<t>ipl>';\n                        if( searchWhileTyping ) {\n                            $('#attribute-layer-search-' + cleanName).on( 'keyup', function (e){\n                            var searchVal = this.value;\n                                lizdelay(function(){\n                                    oTable.fnFilter( searchVal );\n                                }, 500 );\n                            });\n                        }else{\n                            myDom = '<<t>ipl>';\n                        }\n\n                        $( aTable ).dataTable( {\n                             data: dataSet\n                            ,columns: columns\n                            ,initComplete: function(settings, json) {\n                                const api = new $.fn.dataTable.Api(settings);\n                                const tableId = api.table().node().id;\n                                const featureType = tableId.split('attribute-layer-table-')[1];\n\n                                // Trigger event telling attribute table is ready\n                                lizMap.events.triggerEvent(\"attributeLayerContentReady\",\n                                    {\n                                        'featureType': featureType\n                                    }\n                                );\n                            }\n                            ,order: [[ firstDisplayedColIndex, \"asc\" ]]\n                            ,language: { url:lizUrls[\"dataTableLanguage\"] }\n                            ,deferRender: true\n                            ,createdRow: function ( row, data, dataIndex ) {\n                                if ( $.inArray( data.DT_RowId.toString(), lConfig['selectedFeatures'] ) != -1\n                                ) {\n                                    $(row).addClass('selected');\n                                    data.lizSelected = 'a';\n                                }\n                            }\n                            ,dom: myDom\n                            ,pageLength: 50\n                            ,scrollY: '95%'\n                            ,scrollX: '100%'\n\n                        } );\n\n                        var oTable = $( aTable ).dataTable();\n\n                        if( !searchWhileTyping )\n                            $('#attribute-layer-search-' + cleanName).hide();\n\n                        // Bind button which clears top-left search input content\n                        $('#attribute-layer-search-' + cleanName).next('.clear-layer-search').click(function(){\n                            $('#attribute-layer-search-' + cleanName).val('').focus().keyup();\n                        });\n\n                        // Unbind previous events on page\n                        $( aTable ).on( 'page.dt', function() {\n                            // unbind previous events\n                            $(aTable +' tr').unbind('click');\n                            $(aTable +' tr td button').unbind('click');\n                        });\n\n                        // Bind events when drawing table\n                        $( aTable ).on( 'draw.dt', function() {\n\n                            $(aTable +' tr').unbind('click');\n                            $(aTable +' tr td button').unbind('click');\n\n                            // Bind event when users click anywhere on the table line to highlight\n                            bindTableLineClick(aName, aTable);\n\n                            // Refresh size\n                            var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n\n                            refreshDatatableSize('#' + mycontainerId);\n\n                            return false;\n\n                        });\n                    }\n\n                    // Check editable features\n                    if (canEdit || canDelete) {\n                        lizMap.mainLizmap.edition.fetchEditableFeatures([lConfig.id]);\n                    }\n                }\n\n                if ( !cFeatures || cFeatures.length == 0 ){\n                    if ( $.fn.dataTable.isDataTable( aTable ) ) {\n                        var oTable = $( aTable ).dataTable();\n                        oTable.fnClearTable();\n                    }\n                    $(aTable).hide();\n\n                    $('#attribute-layer-'+ cleanName +' span.attribute-layer-msg').html(\n                        lizDict['attributeLayers.toolbar.msg.data.nodata'] + ' ' + lizDict['attributeLayers.toolbar.msg.data.extent']\n                    ).addClass('failure');\n\n                } else {\n                    $(aTable).show();\n\n                }\n\n                if (aCallback)\n                    aCallback(aName,aTable);\n\n                return false;\n            }\n\n            function createDatatableColumns(aName, atFeatures, hiddenFields, cAliases, cTypes, allColumnsKeyValues){\n                const columns = [];\n                let firstDisplayedColIndex = 0;\n\n                // Column with selected status\n                columns.push( {\"data\": \"lizSelected\", \"width\": \"25px\", \"searchable\": false, \"sortable\": true, \"visible\": false} );\n                firstDisplayedColIndex+=1;\n\n                columns.push({ \"data\": \"featureToolbar\", \"width\": \"25px\", \"searchable\": false, \"sortable\": false});\n                firstDisplayedColIndex += 1;\n\n                // Add column for each field\n                for (var columnName in atFeatures[0].properties){\n                    // Do not add hidden fields\n                    if (hiddenFields.includes(columnName)){\n                        continue;\n                    }\n\n                    const colConf = {\n                        \"data\": columnName,\n                        \"title\": cAliases[columnName]\n                    };\n\n                    // Replace keys by values if defined\n                    if (allColumnsKeyValues?.hasOwnProperty(columnName)){\n                        const columnKeyValues = allColumnsKeyValues[columnName];\n                        colConf['render'] = function (data, type, row, meta) {\n                            // Return value related to key if any. Else return original data\n                            // Handle multiple values defined as an array\n                            if (Array.isArray(data)){\n                                return data.map(key => columnKeyValues[key] ? columnKeyValues[key] : key).join(', ');\n                            }\n                            // For multiple values displayed as {\"value a\", \"value b\"} we must first split the value\n                            else if (data && data.toString().substring(0, 1) == '{' && data.toString().slice(-1) == '}') {\n                                var displayLabels = [];\n                                var stringData = data.toString();\n                                stringData = stringData.substring(1, stringData.length - 1);\n                                let splitValues = stringData.split(',');\n                                for (var s in splitValues) {\n                                    let splitValue = splitValues[s].replace(/\"/g, '');\n                                    displayLabels.push(columnKeyValues[splitValue] ? columnKeyValues[splitValue] : splitValue);\n                                }\n                                let displayText = displayLabels.length > 0 ? displayLabels.join(', ') : null;\n                                return displayText;\n                            } else {\n                                return columnKeyValues[data] ? columnKeyValues[data] : data ;\n                            }\n                        }\n                    } else if (['decimal', 'double'].includes(cTypes?.[columnName])) {\n                        // Handle decimal\n                        colConf['render'] = function (data, type, row, meta) {\n                            return parseFloat(data);\n                        }\n                    } else {\n                        // Check if we need to replace url or media by link\n                        colConf['render'] = function (data, type, row, meta) {\n                            // Replace media and URL with links\n                            if (!data || !(typeof data === 'string'))\n                                return data;\n                            if (data.substring(0, 6) == 'media/' || data.substring(0, 7) == '/media/' || data.substring(0, 9) == '../media/') {\n                                var rdata = data;\n                                var colMeta = meta.settings.aoColumns[meta.col];\n                                if (data.substring(0, 7) == '/media/')\n                                    rdata = data.slice(1);\n                                return '<a href=\"' + mediaLinkPrefix + '&path=' + rdata + '\" target=\"_blank\">' + colMeta.title + '</a>';\n                            }\n                            else if (data.substring(0, 4) == 'http' || data.substring(0, 3) == 'www') {\n                                var rdata = data;\n                                if (data.substring(0, 3) == 'www')\n                                    rdata = 'http://' + data;\n                                return '<a href=\"' + rdata + '\" target=\"_blank\">' + data + '</a>';\n                            }\n                            else\n                                return data;\n                        }\n                    }\n\n                    // Handle text alignment\n                    // Note: when keys are replaced by values, alignment is\n                    // made based on keys type and not values type as in QGIS\n                    switch (cTypes?.[columnName]) {\n                        case 'integer':\n                        case 'int':\n                        case 'unsignedInt':\n                        case 'long':\n                        case 'unsignedLong':\n                        case 'decimal':\n                        case 'double':\n                            colConf['className'] = 'text-right';\n                            break;\n                        case 'date':\n                            colConf['className'] = 'text-center';\n                            break;\n                        default:\n                            break;\n                    }\n\n                    columns.push( colConf );\n                }\n\n                var colToReturn = {\n                    'columns': columns,\n                    'firstDisplayedColIndex': firstDisplayedColIndex\n                };\n\n                // Reorder and hide columns from QGIS attributetableconfig property\n                if(\n                    'attributetableconfig' in config.attributeLayers[aName]\n                    && config.attributeLayers[aName]['attributetableconfig']\n                    && !$.isEmptyObject(config.attributeLayers[aName]['attributetableconfig']['columns'])\n                ){\n                    var atc = config.attributeLayers[aName]['attributetableconfig']['columns']['column'];\n                    if(atc.length == 0){\n                        return colToReturn;\n                    }\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    for(var x in atc){\n                        var colx = atc[x];\n                        // Do nothing if the item does not reference a field\n                        if(colx.attributes.type != 'field')\n                            continue;\n                        var fieldname = colx.attributes.name;\n                        var colhidden = colx.attributes.hidden;\n\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('data' in newcolumns[i] && newcolumns[i].data === fieldname) {\n                                // adds it back to the good position if not declared hidden\n                                if( colhidden == \"1\" ){\n                                    // Remove the item\n                                    var a = newcolumns.splice(i,1);\n                                }else{\n                                    // Move the item\n                                    var cfrom = i;\n                                    newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                    newpos+= 1;\n                                }\n                                break;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                } else if (\n                    'columns' in config.layers[aName]\n                    && config.layers[aName]['columns']\n                    && Object.keys(config.layers[aName]['columns']).length > 0\n                ) {\n                    var lizcols = columns.slice(0, firstDisplayedColIndex);\n                    var newcolumns = columns.slice(firstDisplayedColIndex);\n\n                    var newpos = 0;\n                    // columns is an object with key as integer\n                    for (const key in config.layers[aName]['columns']) {\n                        const fieldname = config.layers[aName]['columns'][key];\n                        // Rearrange columns\n                        for (var i=0; i < newcolumns.length; i++) {\n                            // move item\n                            if ('data' in newcolumns[i] && newcolumns[i].data === fieldname) {\n                                // Move the item\n                                var cfrom = i;\n                                newcolumns.splice(newpos, 0, newcolumns.splice(cfrom,1)[0]);\n                                newpos+= 1;\n                            }\n                        }\n                    }\n\n                    var newcolumnsfinal = lizcols.concat(newcolumns)\n                    colToReturn['columns'] = newcolumnsfinal;\n                }\n\n                return colToReturn;\n            }\n\n\n            function formatDatatableFeatures(atFeatures, isChild, hiddenFields, selectedFeatures, layerId, parentLayerID){\n                var dataSet = [];\n                var foundFeatures = {};\n                atFeatures.forEach(function(feat) {\n                    var line = {};\n\n                    // add feature to layer global data\n                    var fid = feat.id.split('.')[1];\n                    foundFeatures[fid] = feat;\n\n                    // Add row ID\n                    line['DT_RowId'] = fid;\n                    line['lizSelected'] = 'z';\n\n                    if( selectedFeatures && $.inArray( fid, selectedFeatures ) != -1 )\n                        line.lizSelected = 'a';\n\n                    line['featureToolbar'] = `<lizmap-feature-toolbar value=\"${layerId + '.' + fid}\" ${isChild ? `parent-layer-id=\"${parentLayerID}\"`: ''}></lizmap-feature-toolbar>`;\n\n                    // Build table lines\n                    for (var idx in feat.properties){\n                        if( ($.inArray(idx, hiddenFields) > -1) )\n                            continue;\n                        var prop = feat.properties[idx];\n                        line[idx] = prop;\n                    }\n\n\n                    dataSet.push( line );\n                });\n                return {\n                    'dataSet': dataSet,\n                    'foundFeatures': foundFeatures\n                };\n            }\n\n            function bindTableLineClick(aName, aTable){\n                $(aTable +' tr').click(function() {\n\n                    $(aTable +' tr').removeClass('active');\n                    $(this).addClass('active');\n\n                    // Get corresponding feature\n                    var featId = this.querySelector('lizmap-feature-toolbar').fid;\n\n                    // Send signal\n                    lizMap.events.triggerEvent(\"layerfeaturehighlighted\",\n                        { 'sourceTable': aTable, 'featureType': aName, 'fid': featId}\n                    );\n\n                    // Display popup for the feature\n                    var lConfig = config.layers[aName];\n                    if( lConfig && lConfig['popup'] == 'True' ){\n                        var feat = lConfig['features'][featId];\n\n                        var parentLayerCleanName = aTable.replace('#attribute-layer-table-', '').split('-');\n                        parentLayerCleanName = parentLayerCleanName[0];\n\n                        $('#attribute-table-panel-' + parentLayerCleanName ).html('');\n\n                        lizMap.getFeaturePopupContent( aName, feat, function(data){\n                            $('#attribute-table-panel-' + parentLayerCleanName ).html(data);\n\n                            // Trigger event\n                            lizMap.events.triggerEvent('lizmappopupdisplayed_inattributetable'\n                            );\n\n                            var closeButton = '<a class=\"close-attribute-feature-panel pull-right\" href=\"#\"><i class=\"icon-remove\"></i></a>'\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4').append(closeButton);\n\n                            $('#attribute-table-panel-' + parentLayerCleanName + ' h4 a.close-attribute-feature-panel').click(function(){\n                                // Hide panel\n                                $('#attribute-layer-main-' + parentLayerCleanName ).removeClass('reduced');\n                                $('#attribute-table-panel-' + parentLayerCleanName ).removeClass('visible').html('');\n                                // Deactivate Detail button\n                                $('#attribute-layer-'+ parentLayerCleanName + ' button.btn-detail-attributeTable').removeClass('btn-primary');\n\n                            });\n                        });\n                    }\n                });\n            }\n\n            function getEditionChildData( childLayerName, filter, childTable ){\n                getDataAndFillAttributeTable(childLayerName, filter, childTable, () => {\n                    // Check edition capabilities\n                    var canCreate = false;\n                    var canEdit = false;\n                    if ('editionLayers' in config && childLayerName in config.editionLayers ) {\n                        var al = config.editionLayers[childLayerName];\n                        if( al.capabilities.createFeature == \"True\" )\n                            canCreate = true;\n                        if( al.capabilities.modifyAttribute == \"True\" || al.capabilities.modifyGeometry == \"True\" )\n                            canEdit = true;\n                    }\n\n                    // Bind events when drawing table\n                    $( childTable ).one( 'draw.dt', function() {\n\n                        if( canEdit ) {\n                            // Add property on lizmap-feature-toolbar to edit children feature linked to a parent feature\n                            const parentFeatId = $(childTable).parents('div.tab-pane.attribute-layer-child-content')\n                                .find('input.attribute-table-hidden-parent-feature-id').val();\n                            $(childTable).DataTable().cells().nodes()\n                                .to$().children('lizmap-feature-toolbar').attr('parent-feature-id', parentFeatId);\n                        }\n\n                        if ( canCreate ) {\n                            // Button to create feature linked to parent\n                            const createHeader = $($(childTable).DataTable().column(1).header());\n                            if ( createHeader.find('button.attribute-layer-feature-create').length == 0 ) {\n                                createHeader\n                                .append(`<button class=\"btn btn-mini attribute-layer-feature-create\" value=\"-1\" title=\"${lizDict['attributeLayers.toolbar.btn.data.createFeature.title']}\">\n                                            <i class=\"icon-plus\"></i>\n                                        </button>`)\n                                .on('click', 'button.attribute-layer-feature-create',function () {\n                                    var tabPane = $(this).parents('div.tab-pane.attribute-layer-child-content');\n                                    var parentFeatId = tabPane.find('input.attribute-table-hidden-parent-feature-id').val();\n                                    var parentLayerName = tabPane.find('input.attribute-table-hidden-parent-layer').val();\n                                    var layerName = tabPane.find('input.attribute-table-hidden-layer').val();\n                                    lizMap.getLayerFeature(parentLayerName, parentFeatId, function (parentFeat) {\n                                        var parentLayerId = config.layers[lizMap.getLayerNameByCleanName(parentLayerName)]['id'];\n                                        var lid = config.layers[lizMap.getLayerNameByCleanName(layerName)]['id'];\n                                        lizMap.launchEdition(lid, null, { layerId: parentLayerId, feature: parentFeat });\n                                    });\n                                    return false;\n                                });\n                            }\n                        }\n\n                        // Display the first child table displayed\n                        if ( $(childTable).parents('.edition-children-content').children('ul.nav-tabs').children('li.active').length == 0 ) {\n                            var tabId = $(childTable).parents('.tab-pane.attribute-layer-child-content').attr('id');\n                            $(childTable).parents('.edition-children-content').find('ul.nav-tabs > li > a[href=\"#'+tabId+'\"]').click();\n                        }\n                        return false;\n\n                    });\n                });\n            }\n\n\n            // Deprecated, use getDataAndFillAttributeTable() instead\n            function getAttributeFeatureData(aName, aFilter, aFeatureID, aGeometryName, aCallBack){\n\n              aFilter = typeof aFilter !== 'undefined' ?  aFilter : null;\n              aFeatureID = typeof aFeatureID !== 'undefined' ?  aFeatureID : null;\n              aGeometryName  = typeof aGeometryName !== 'undefined' ?  aGeometryName : 'extent';\n              aCallBack = typeof aCallBack !== 'undefined' ?  aCallBack : null;\n\n              // get layer configs\n              if ( !(aName in config.layers) ) {\n                  var qgisName = lizMap.getNameByCleanName(aName);\n                  if ( qgisName && (qgisName in config.layers)) {\n                      aName = qgisName;\n                  } else {\n                      console.log('getAttributeFeatureData: \"'+aName+'\" and \"'+qgisName+'\" not found in config');\n                      return false;\n                  }\n              }\n              var aConfig = config.layers[aName];\n              var atConfig = null;\n              if( aName in config.attributeLayers )\n                  atConfig = config.attributeLayers[aName];\n\n              var limitDataToBbox = false;\n              if ( 'limitDataToBbox' in config.options && config.options.limitDataToBbox == 'True'){\n                  limitDataToBbox = true;\n              }\n              lizMap.getFeatureData(aName, aFilter, aFeatureID, aGeometryName, limitDataToBbox, null, null, aCallBack);\n              return true;\n            }\n\n            function refreshLayerSelection( featureType, featId, rupdateDrawing ) {\n                // Set function parameters if not given\n                rupdateDrawing = typeof rupdateDrawing !== 'undefined' ?  rupdateDrawing : null;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Add or remove feature id from the selectedFeatures\n                if( $.inArray( featId, config.layers[featureType]['selectedFeatures'] ) == -1 ) {\n                    config.layers[featureType]['selectedFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['selectedFeatures'] );\n                    config.layers[featureType]['selectedFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': rupdateDrawing\n                    }\n                );\n\n            }\n\n            function setSelectedFeaturesFromSearchedFilter( featureType, supdateDrawing ) {\n                // Set function parameters if not given\n                supdateDrawing = typeof supdateDrawing !== 'undefined' ?  supdateDrawing : true;\n\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                var hasChanged = false;\n                // Add filtered featured\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n                    // Get parent table for the feature type\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n\n                        var sIds = [];\n                        var rTable = $(this).DataTable();\n                        var filteredrowids = rTable.rows( {\"filter\":\"applied\"} ).ids();\n                        for ( var i = 0; i < filteredrowids.length; i++ ) {\n                            sIds.push( filteredrowids[i] );\n                        }\n                        config.layers[featureType]['selectedFeatures'] = sIds;\n                        hasChanged = true;\n                    }\n                })\n\n                if( hasChanged ){\n                    lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                        {\n                            'featureType': featureType,\n                            'featureIds': config.layers[featureType]['selectedFeatures'],\n                            'updateDrawing': supdateDrawing\n                        }\n                    );\n                }\n            }\n\n            function emptyLayerSelection( featureType, arefresh ) {\n                // Set function parameters if not given\n                arefresh = typeof arefresh !== 'undefined' ?  arefresh : true;\n\n                // Empty array\n                config.layers[featureType]['selectedFeatures'] = [];\n\n                lizMap.events.triggerEvent(\"layerSelectionChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['selectedFeatures'],\n                        'updateDrawing': arefresh\n                    }\n                );\n            }\n\n            function refreshLayerFilter( featureType, featId ) {\n                // Assure filteredFeatures property exists for the layer\n                if( !config.layers[featureType]['filteredFeatures'] )\n                    config.layers[featureType]['filteredFeatures'] = [];\n\n                // Add or remove feature id from the filteredFeatures\n                if( $.inArray( featId, config.layers[featureType]['filteredFeatures'] ) == -1 ) {\n                    config.layers[featureType]['filteredFeatures'].push( featId );\n                }else{\n                    var idx = $.inArray( featId, config.layers[featureType]['filteredFeatures'] );\n                    config.layers[featureType]['filteredFeatures'].splice( idx, 1 );\n                }\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            function emptyLayerFilter( featureType ) {\n                // Empty array\n                config.layers[featureType]['filteredFeatures'] = [];\n\n                lizMap.lizmapLayerFilterActive = null;\n\n                // Empty layer filter\n                var layer = lizMap.map.getLayersByName( lizMap.cleanName(featureType) )[0];\n                if( layer ) {\n                    delete layer.params['FILTER'];\n                    delete layer.params['FILTERTOKEN'];\n                }\n                config.layers[featureType]['request_params']['filter'] = null;\n                config.layers[featureType]['request_params']['exp_filter'] = null;\n                config.layers[featureType]['request_params']['filtertoken'] = null;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n            function filterLayerFromSelectedFeatures( featureType ) {\n\n                if( !config.attributeLayers[featureType] )\n                    return false;\n                // Assure selectedFeatures property exists for the layer\n                if( !config.layers[featureType]['selectedFeatures'] )\n                    config.layers[featureType]['selectedFeatures'] = [];\n\n                // Copy selected features as filtered features\n                config.layers[featureType]['filteredFeatures'] = config.layers[featureType]['selectedFeatures'].slice();\n\n                // Remove selection\n                emptyLayerSelection( featureType, false );\n\n                lizMap.lizmapLayerFilterActive = featureType;\n\n                lizMap.events.triggerEvent(\"layerFilteredFeaturesChanged\",\n                    {\n                        'featureType': featureType,\n                        'featureIds': config.layers[featureType]['filteredFeatures'],\n                        'updateDrawing': true\n                    }\n                );\n            }\n\n        function updateLayer( typeNamePile, typeNameFilter, typeNameDone,  cascade ){\n            if (typeNamePile.length == 0) {\n                return;\n            }\n            cascade = typeof cascade !== 'undefined' ?  cascade : true;\n\n            // Get first elements of the pile and withdraw it from the pile\n            var typeName = typeNamePile.shift();\n            var cleanName = lizMap.cleanName(typeName);\n\n            // Get corresponding filter\n            var aFilter = typeNameFilter[typeName];\n\n            // Apply filter and get children\n            if (aFilter) {\n                applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade );\n            } else {\n                applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n            }\n\n            // Change background in switcher\n            var trFilteredBgcolor = 'inherit';\n            var displayUnFilterSwitcherTool = false;\n            if( aFilter ){\n                trFilteredBgcolor = 'rgba(255, 171, 0, 0.4)';\n                displayUnFilterSwitcherTool = true;\n            }\n            $('#switcher .treeTable tr#group-' + cleanName).css('background-color', trFilteredBgcolor );\n            $('#switcher .treeTable tr#layer-' + cleanName).css('background-color', trFilteredBgcolor );\n            $('#layerActionUnfilter' ).toggle( ( lizMap.lizmapLayerFilterActive !== null ) ).css( 'background-color', 'rgba(255, 171, 0, 0.4)');\n        }\n\n        function buildChildParam( relation, typeNameDone ) {\n            var childLayerConfigA = lizMap.getLayerConfigById(\n                relation.referencingLayer,\n                config.attributeLayers,\n                'layerId'\n            );\n\n            // if no config\n            if( !childLayerConfigA ) {\n                return null;\n            }\n\n            var childLayerKeyName = childLayerConfigA[0];\n            var childLayerConfig = childLayerConfigA[1];\n\n            // Avoid typeName already done ( infinite loop )\n            if( $.inArray( childLayerKeyName, typeNameDone ) != -1 )\n                return null;\n\n            // Check if it is a pivot table\n            var relationIsPivot = false;\n            if( 'pivot' in childLayerConfig\n                && childLayerConfig.pivot == 'True'\n                && childLayerConfig.layerId in config.relations.pivot\n            ){\n                relationIsPivot = true;\n            }\n            // Build parameter for this child\n            var fParam = {\n                'filter': null,\n                'fieldToFilter': relation.referencingField,\n                'parentField': relation.referencedField,\n                'parentValues': [],\n                'pivot': relationIsPivot,\n                'otherParentTypeName': null,\n                'otherParentRelation': null,\n                'otherParentValues': []\n            };\n\n            return [childLayerKeyName, fParam];\n        }\n\n        function getPivotParam( typeNameId, attributeLayerConfig, typeNameDone ) {\n            var isPivot = false;\n            var pivotParam = null;\n            if( 'pivot' in attributeLayerConfig\n                && attributeLayerConfig.pivot == 'True'\n                && attributeLayerConfig.layerId in config.relations.pivot\n            ){\n                isPivot = true;\n            }\n\n            if (!isPivot) {\n                return pivotParam;\n            }\n\n            var otherParentId = null;\n            var otherParentRelation = null;\n            var otherParentTypeName = null;\n\n            for( var rx in config.relations ){\n                // Do not take pivot object into account\n                if( rx == 'pivot' )\n                    continue;\n                // Do not get relation for parent layer (we are looking for other parents only)\n                if( rx == typeNameId)\n                    continue;\n                // Do not get relation for parent to avoid ( infinite loop otherwise )\n                var otherParentConfig = lizMap.getLayerConfigById(\n                    rx,\n                    config.attributeLayers,\n                    'layerId'\n                );\n                if( otherParentConfig\n                    && $.inArray( otherParentConfig[0], typeNameDone ) != -1\n                )\n                    continue;\n\n                var aLayerRelations = config.relations[rx];\n\n                for( var xx in aLayerRelations){\n                    // Only look at relations concerning typeName\n                    if( aLayerRelations[xx].referencingLayer != attributeLayerConfig.layerId)\n                        continue;\n\n                    otherParentId = rx;\n                    otherParentRelation = aLayerRelations[xx];\n\n                    var otherParentConfig = lizMap.getLayerConfigById(\n                        rx,\n                        config.attributeLayers,\n                        'layerId'\n                    );\n                    otherParentTypeName =  otherParentConfig[0];\n                }\n            }\n\n            if( otherParentId && otherParentRelation){\n                pivotParam = {};\n                pivotParam['otherParentTypeName'] = otherParentTypeName;\n                pivotParam['otherParentRelation'] = otherParentRelation;\n                pivotParam['otherParentValues'] = [];\n            }\n\n            return pivotParam;\n        }\n\n        function applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n\n            // Add done typeName to the list\n            typeNameDone.push( typeName );\n\n            // **0** Prepare some variable. e.g. reset features stored in the layer config\n            var layerConfig = config.layers[typeName];\n            layerConfig['features'] = {};\n\n            // **1** Get children info\n            var typeNameId = layerConfig['id'];\n            var typeNameChildren = {};\n\n            var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                typeNameId,\n                config.attributeLayers,\n                'layerId'\n            );\n            var attributeLayerConfig = null;\n            if( getAttributeLayerConfig ) {\n                attributeLayerConfig = getAttributeLayerConfig[1];\n            }\n\n            if( 'relations' in config\n                && typeNameId in config.relations\n                && cascade\n            ) {\n                // Loop through relations to get children data\n                var layerRelations = config.relations[typeNameId];\n                for( var lid in layerRelations ) {\n                    var relation = layerRelations[lid];\n                    var childParam = buildChildParam(relation, typeNameDone);\n\n                    // if no child param\n                    if( !childParam )\n                        continue;\n\n                    typeNameChildren[ childParam[0] ] = childParam[1];\n                }\n            }\n\n            // ** ** If typeName is a pivot, add some info about the otherParent\n            // If pivot, re-loop relations to find configuration for other parents (go up)\n            var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, typeNameDone );\n\n            // **3** Apply filter to the typeName and redraw if necessary\n            var layer = lizMap.map.getLayersByName( lizMap.cleanName(typeName) )[0];\n            layerConfig['request_params']['filter'] = null;\n            layerConfig['request_params']['exp_filter'] = null;\n            layerConfig['request_params']['filtertoken'] = null;\n\n            if( layer ) {\n                delete layer.params['FILTER'];\n                delete layer.params['FILTERTOKEN'];\n            }\n\n            // Redraw openlayers layer\n            if( layer\n                && layerConfig['geometryType'] != 'none'\n                && layerConfig['geometryType'] != 'unknown'\n            ){\n                layer.redraw(true);\n            }\n\n            // Refresh attributeTable\n            var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n            if( $( opTable ).length ){\n                getDataAndRefreshAttributeTable(typeName, null, opTable);\n            }\n\n            // And send event so that getFeatureInfo and getPrint use the updated layer filters\n            lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                {\n                    'featureType': typeName,\n                    'filter': null,\n                    'updateDrawing': true\n                }\n            );\n\n            // **4** build children filters\n            if( cascade ) {\n                for( var x in typeNameChildren ){\n                    typeNameFilter[x] = null;\n                    typeNamePile.push( x );\n                }\n            }\n\n            // **5** Add other parent to pile when typeName is a pivot\n            if( pivotParam ){\n                console.log(pivotParam);\n                // Add a Filter to the \"other parent\" layers\n                config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = null;\n                config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['exp_filter'] = null;\n                config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filtertoken'] = null;\n\n                typeNameFilter[ pivotParam['otherParentTypeName'] ] = null;\n                typeNamePile.push( pivotParam['otherParentTypeName'] );\n            }\n\n            // **6** Launch the method again if typeName is not empty\n            if( typeNamePile.length > 0 ) {\n                updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n            }\n\n        }\n\n        function applyLayerFilter( typeName, aFilter, typeNamePile, typeNameFilter, typeNameDone, cascade ){\n            if (!aFilter) {\n                applyEmptyLayerFilter( typeName, typeNamePile, typeNameFilter, typeNameDone, cascade );\n                return;\n            }\n\n            // Add done typeName to the list\n            typeNameDone.push( typeName );\n\n            // Get features to refresh attribute table AND build children filters\n            var geometryName = 'extent';\n            lizMap.getFeatureData(typeName, aFilter, null, geometryName, false, null, null,\n                function (aName, aNameFilter, aNameFeatures, aNameAliases, aNameTypes ){\n\n                // **0** Prepare some variable. e.g. reset features stored in the layer config\n                var layerConfig = config.layers[typeName];\n                layerConfig['features'] = {};\n                var foundFeatures = {};\n                const wmsName = layerConfig?.shortname || layerConfig.name;\n\n                // **1** Get children info\n                var cFeatures = aNameFeatures;\n                var typeNameId = layerConfig['id'];\n                var typeNamePkey = config.attributeLayers[typeName]['primaryKey'];\n                var typeNamePkeyValues = [];\n                var typeNameChildren = {};\n\n                var getAttributeLayerConfig = lizMap.getLayerConfigById(\n                    typeNameId,\n                    config.attributeLayers,\n                    'layerId'\n                );\n                var attributeLayerConfig = null;\n                if( getAttributeLayerConfig )\n                    attributeLayerConfig = getAttributeLayerConfig[1];\n\n                if( 'relations' in config\n                    && typeNameId in config.relations\n                    && cascade\n                ) {\n                    // Loop through relations to get children data\n                    var layerRelations = config.relations[typeNameId];\n                    for( var lid in layerRelations ) {\n\n                        var relation = layerRelations[lid];\n                        var childParam = buildChildParam(relation, typeNameDone);\n\n                        // if no child param\n                        if( !childParam )\n                            continue;\n\n                        typeNameChildren[ childParam[0] ] = childParam[1];\n\n                    }\n                }\n\n                // ** ** If typeName is a pivot, add some info about the otherParent\n                // If pivot, re-loop relations to find configuration for other parents (go up)\n                var pivotParam = getPivotParam( typeNameId, attributeLayerConfig, typeNameDone );\n\n                // **2** Loop through features && get children filter values\n                var filteredFeatures = [];\n\n                cFeatures.forEach(function(feat) {\n\n                    // Add feature to layer config data\n                    var fid = feat.id.split('.')[1];\n                    foundFeatures[fid] = feat;\n\n                    // Add primary keys values to build the WMS filter ( to be able to redraw layer)\n                    var pk = feat.properties[typeNamePkey];\n                    if( ('types' in layerConfig)\n                     && (typeNamePkey in layerConfig.types)\n                     && layerConfig.types[typeNamePkey] == 'string') {\n                        pk = \" '\" + pk + \"' \";\n                    } else {\n                        var intRegex = /^[0-9]+$/;\n                        if( !( intRegex.test(pk) ) )\n                            pk = \" '\" + pk + \"' \";\n                    }\n                    typeNamePkeyValues.push( pk );\n\n                    // Reset filteredFeatures with found features\n                    filteredFeatures.push( fid );\n\n                    // Loop through found children to build filter\n                    // Only if aFilter (original typeName filter) is not null\n                    if( cascade && aFilter ){\n                        for( var x in typeNameChildren ){\n                            // Get the parent values to be able to build the filter\n                            var cData = typeNameChildren[x];\n                            typeNameChildren[x]['parentValues'].push( \"'\" + feat.properties[ cData['parentField'] ] + \"'\" );\n                        }\n                    }\n\n                    // If pivot, we need also to get the values to filter the other parent\n                    if( pivotParam && aFilter ){\n                        var referencingField = pivotParam['otherParentRelation'].referencingField;\n                        pivotParam['otherParentValues'].push( \"'\" + feat.properties[ referencingField ] + \"'\" );\n                    }\n                });\n\n                // **3** Apply filter to the typeName and redraw if necessary\n                layerConfig['features'] = foundFeatures;\n                layerConfig['alias'] = aNameAliases;\n\n                var lFilter = null;\n                var layer = lizMap.map.getLayersByName( lizMap.cleanName(typeName) )[0];\n                if( layer && layer.params) {\n                    layerN = layer.params['LAYERS'];\n                }\n\n                // Add false value to hide all features if we need to hide layer\n                if( typeNamePkeyValues.length == 0 )\n                    typeNamePkeyValues.push('-99999');\n\n                if( aFilter ){\n                    // The values must be separated by comma AND spaces\n                    // since QGIS controls the syntax for the FILTER parameter\n                    lFilter = wmsName + ':\"' + typeNamePkey + '\" IN ( ' + typeNamePkeyValues.join( ' , ' ) + ' ) ';\n\n                    // Try to use the simple filter ( for example myforeignkey = 4 )\n                    // instead of the full list of pkeys we got from wfs\n                    // This can prevent too long GET URL\n                    // NB : we should improve this by using server side filters\n                    if( !aFilter.startsWith('$id') ){\n                        var simpleFilter = aFilter;\n                        if( !aFilter.startsWith(wmsName) ){\n                            simpleFilter = wmsName + ':' + aFilter ;\n                        }\n                        lFilter = simpleFilter;\n                    }\n                }\n\n                layerConfig['request_params']['filter'] = lFilter;\n                layerConfig['request_params']['exp_filter'] = aFilter;\n\n                // Add filter to openlayers layer\n                if( layer\n                    && layer.params\n                ){\n                    if( aFilter ){\n                        // Get filter token\n                        var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                            ,OpenLayers.Util.getParameterString(lizUrls.params)\n                        );\n                        var sdata = {\n                            service: 'WMS',\n                            request: 'GETFILTERTOKEN',\n                            typename: wmsName,\n                            filter: lFilter\n                        };\n                        $.post(surl, sdata, function(result){\n                            layer.params['FILTERTOKEN'] = result.token;\n                            delete layer.params['FILTER'];\n                            layerConfig['request_params']['filtertoken'] = result.token;\n                            // Redraw openlayers layer\n                            if( layerConfig['geometryType']\n                                && layerConfig.geometryType != 'none'\n                                && layerConfig.geometryType != 'unknown'\n                            ){\n                                layer.redraw(true);\n                            }\n                        });\n\n                    }\n                    else{\n                        delete layer.params['FILTER'];\n                        delete layer.params['FILTERTOKEN'];\n                        layerConfig['request_params']['filtertoken'] = null;\n                    }\n                }\n\n                // Redraw openlayers layer\n                if( layer\n                    && layerConfig['geometryType'] != 'none'\n                    && layerConfig['geometryType'] != 'unknown'\n                ){\n                    layer.redraw(true);\n                }\n\n                // Refresh attributeTable\n                var opTable = '#attribute-layer-table-'+lizMap.cleanName( typeName );\n                if( $( opTable ).length ){\n                    refreshLayerAttributeDatatable(typeName, opTable, cFeatures);\n                }\n\n                // And send event so that getFeatureInfo and getPrint use the updated layer filters\n                lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                    {\n                        'featureType': typeName,\n                        'filter': lFilter,\n                        'updateDrawing': true\n                    }\n                );\n\n                // **4** build children filters\n                if( cascade ) {\n                    for( var x in typeNameChildren ){\n                        var cName = x;\n                        var cData = typeNameChildren[x];\n                        var cFilter = null;\n                        var cExpFilter = null;\n\n                        // Build filter for children\n                        // and add child to the typeNameFilter and typeNamePile objects\n                        // only if typeName filter aFilter was originally set\n                        if( aFilter && cData['parentValues'].length > 0 && cascade != 'removeChildrenFilter' ) {\n                            // The values must be separated by comma AND spaces\n                            // since QGIS controls the syntax for the FILTER parameter\n                            cExpFilter = '\"' + cData['fieldToFilter'] + '\" IN ( ' + cData['parentValues'].join( ' , ' ) + ' )';\n                        }\n                        else if( aFilter && cascade != 'removeChildrenFilter' ) {\n                            cExpFilter = '\"' + cData['fieldToFilter'] + '\" IN ( -99999 )';\n                        }\n                        cFilter = wmsName + ':' + cExpFilter;\n\n                        config.layers[cName]['request_params']['filter'] = cFilter;\n                        config.layers[cName]['request_params']['exp_filter'] = cExpFilter;\n\n                        typeNameFilter[x] = cExpFilter;\n                        typeNamePile.push( x );\n\n                    }\n                }\n\n                // **5** Add other parent to pile when typeName is a pivot\n                if( pivotParam ){\n                    // Add a Filter to the \"other parent\" layers\n                    var cFilter = null;\n                    // The stored filter in this variable cExpFilter must not be prefixed by the layername\n                    // since it is used to build the EXP_FILTER parameter\n                    // the cFilter will be based on this value but with the layer name as prefix\n                    var cExpFilter = null;\n                    var orObj = null;\n                    if( aFilter  ){\n                        if( pivotParam['otherParentValues'].length > 0 ){\n                            cExpFilter = '\"' + pivotParam['otherParentRelation'].referencedField + '\"';\n                            // The values must be separated by comma AND spaces\n                            // since QGIS controls the syntax for the FILTER parameter\n                            cExpFilter+= ' IN ( ' + pivotParam['otherParentValues'].join( ' , ' ) + ' )';\n                            cFilter = wmsName + ':' + cExpFilter;\n                            orObj = {\n                                field: pivotParam['otherParentRelation'].referencedField,\n                                values: pivotParam['otherParentValues']\n                            }\n                        }\n                        else {\n                            cExpFilter = '\"' + pivotParam['otherParentRelation'].referencedField + '\" IN ( ' + \"'-999999'\" + ' )';\n                            cFilter = wmsName + ':' + cExpFilter;\n                            orObj = {\n                                field: pivotParam['otherParentRelation'].referencedField,\n                                values: ['-999999']\n                            }\n                        }\n                    }\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['filter'] = cFilter;\n                    config.layers[ pivotParam['otherParentTypeName'] ]['request_params']['exp_filter'] = cExpFilter;\n\n                    // The stored filter in this variable must not be prefixed by the layername\n                    // since it is used to build the EXP_FILTER parameter\n                    // the FILTER will be based on this value but with the layer name as prefix\n                    typeNameFilter[ pivotParam['otherParentTypeName'] ] = cExpFilter;\n                    typeNamePile.push( pivotParam['otherParentTypeName'] );\n                }\n\n                // **6** Launch the method again if typeName is not empty\n                if( typeNamePile.length > 0 ) {\n                    updateLayer( typeNamePile, typeNameFilter, typeNameDone, cascade );\n                }\n            });\n        }\n\n            function deleteEditionFeature( layerId, featureId ){\n                var eConfig = lizMap.getLayerConfigById(\n                    layerId,\n                    config.editionLayers,\n                    'layerId'\n                );\n                var deleteConfirm = '';\n                if( eConfig )\n                    deleteConfirm += config.layers[eConfig[0]].title;\n                if( config.layers[eConfig[0]]\n                    && config.layers[eConfig[0]]['features']\n                    && config.layers[eConfig[0]]['features'][featureId]\n                ){\n                    var eProp = config.layers[eConfig[0]]['features'][featureId].properties;\n                    for( var y in eProp ){\n                        deleteConfirm+= '  \\n\"' + y + '\": ' + eProp[y] ;\n                    }\n\n                }\n                lizMap.deleteEditionFeature( layerId, featureId, deleteConfirm, function( aLID, aFID ){\n                    // Check if the map and tables must be refreshed after this deletion\n                    var featureType = eConfig[0];\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    // Get filter status for the layer concerned by the edition\n                    var hasFilter = false;\n                    if(\n                        ('filteredFeatures' in config.layers[featureType] && config.layers[featureType]['filteredFeatures'].length > 0 )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['filter'] )\n                        || ( 'request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['exp_filter'] )\n                    ){\n                       hasFilter = true;\n                    }\n                    if( hasFilter && lizMap.lizmapLayerFilterActive && cascadeToChildren ){\n                        var parentFeatureType = lizMap.lizmapLayerFilterActive;\n                        updateMapLayerDrawing( parentFeatureType, cascadeToChildren );\n                    }\n\n                });\n            }\n\n\n            function updateMapLayerDrawing( featureType, cascade ){\n                cascade = typeof cascade !== 'undefined' ?  cascade : true;\n                // Get layer config\n                var lConfig = config.layers[featureType];\n                if( !lConfig )\n                    return;\n\n                // Get OL layer to update params if it exists\n                var cleanName = lizMap.cleanName(featureType);\n                var layer = lizMap.map.getLayersByName( cleanName )[0];\n\n                // Build filter from filteredFeatures\n                var cFilter = null;\n                if ( lConfig['filteredFeatures']\n                    && lConfig['filteredFeatures'].length > 0\n                ){\n                    // The values must be separated by comma AND spaces\n                    // since QGIS controls the syntax for the FILTER parameter\n                    cFilter = '$id IN ( ' + lConfig['filteredFeatures'].join( ' , ' ) + ' ) ';\n                }\n\n                var wmsName = featureType;\n                if ( lConfig['shortname'] )\n                    wmsName = lConfig['shortname'];\n\n                // Build selection parameter from selectedFeatures\n                if( lConfig['selectedFeatures']\n                    && lConfig['selectedFeatures'].length\n                ) {\n                    lConfig['request_params']['selection'] = wmsName + ':' + lConfig['selectedFeatures'].join();\n\n                    // Get selection token\n                    var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                        ,OpenLayers.Util.getParameterString(lizUrls.params)\n                    );\n                    var sdata = {\n                        service: 'WMS',\n                        request: 'GETSELECTIONTOKEN',\n                        typename: wmsName,\n                        ids: lConfig['selectedFeatures'].join()\n                    };\n                    $.post(surl, sdata, function(result){\n                        lConfig['request_params']['selectiontoken'] = result.token;\n                        if ( layer ) {\n                            //layer.params['SELECTION'] = wmsName + ':' + lConfig['selectedFeatures'].join();\n                            layer.params['SELECTIONTOKEN'] = result.token;\n                        }\n                    });\n                }\n                else {\n                    if ( layer ){\n                        //delete layer.params['SELECTION'];\n                        delete layer.params['SELECTIONTOKEN'];\n                    }\n                    lConfig['request_params']['selection'] = null;\n                    lConfig['request_params']['selectiontoken'] = null;\n                }\n\n                // Build data to update layer drawing and other components\n                var typeNamePile = [ featureType ];\n                var typeNameFilter = {};\n                typeNameFilter[featureType] = cFilter;\n                var typeNameDone = [];\n                updateLayer(typeNamePile, typeNameFilter, typeNameDone,  cascade );\n\n            }\n\n            function updateMapLayerSelection( featureType ) {\n                // Get layer config\n                var lConfig = config.layers[featureType];\n                if( !lConfig )\n                    return;\n\n                // Get OL layer to be redrawn\n                var cleanName = lizMap.cleanName(featureType);\n                var layer = lizMap.map.getLayersByName( cleanName )[0];\n                if( !layer )\n                    return;\n\n                var wmsName = featureType;\n                if ( lConfig['shortname'] )\n                    wmsName = lConfig['shortname'];\n\n                // Build selection parameter from selectedFeatures\n                if( lConfig.selectedFeatures\n                    && lConfig.selectedFeatures.length\n                ) {\n                    if ( !( 'request_params' in lConfig ) )\n                        lConfig['request_params'] = {};\n                    lConfig.request_params['selection'] = wmsName + ':' + lConfig.selectedFeatures.join();\n\n                    // Get selection token\n                    var surl = OpenLayers.Util.urlAppend(lizUrls.wms\n                        ,OpenLayers.Util.getParameterString(lizUrls.params)\n                    );\n                    var sdata = {\n                        service: 'WMS',\n                        request: 'GETSELECTIONTOKEN',\n                        typename: wmsName,\n                        ids: lConfig.selectedFeatures.join()\n                    };\n                    $.post(surl, sdata, function(result){\n                        lConfig.request_params['selectiontoken'] = result.token;\n                        if ( layer )\n                            layer.params['SELECTIONTOKEN'] = result.token;\n                        // Redraw openlayers layer\n                        if( lConfig['geometryType']\n                            && lConfig.geometryType != 'none'\n                            && lConfig.geometryType != 'unknown'\n                        ){\n                            layer.redraw(true);\n                        }\n                    });\n                }\n                else {\n                    //delete layer.params['SELECTION'];\n                    if ( layer )\n                        delete layer.params['SELECTIONTOKEN'];\n                    if ( !( 'request_params' in lConfig ) )\n                        lConfig['request_params'] = {};\n                    lConfig.request_params['selection'] = null;\n                    lConfig.request_params['selectiontoken'] = null;\n                    // Redraw openlayers layer\n                    if( lConfig['geometryType']\n                        && lConfig.geometryType != 'none'\n                        && lConfig.geometryType != 'unknown'\n                    ){\n                        layer.redraw(true);\n                    }\n                }\n            }\n\n            function updateAttributeTableTools( featureType ){\n\n                // Show unselect and filter buttons if some features are selected\n                var selIds = config.layers[featureType]['selectedFeatures'];\n                var filIds = config.layers[featureType]['filteredFeatures'];\n                var cleanName = lizMap.cleanName(featureType);\n                // UnSelection button and move selection to top\n                if( selIds && selIds.length > 0 ){\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n                }\n                else{\n                    $('button.btn-unselect-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                    $('button.btn-moveselectedtotop-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden');\n                }\n\n                // Filter button\n\n                // Hide it first and remove active classes\n                $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('hidden').removeClass('btn-primary');\n\n                // Then display it only if:\n                // * no other features is active and selected items exists for this layer\n                // * or this is the layer for which it is active\n                if( ( !lizMap.lizmapLayerFilterActive && selIds && selIds.length > 0)\n                    || lizMap.lizmapLayerFilterActive == featureType\n                 ){\n                    $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').removeClass('hidden');\n\n                    // Show button as activated if some filter exists\n                    if( filIds && filIds.length > 0 )\n                        $('button.btn-filter-attributeTable[value=\"'+cleanName+'\"]').addClass('btn-primary');\n                }\n\n            }\n\n            function redrawAttributeTableContent( featureType, featureIds ){\n                // Loop through all datatables to get the one concerning this featureType\n                $('.attribute-table-table[id]').each(function(){\n                    var tableId = $(this).attr('id');\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        // Get selected feature ids if not given\n                        if( !featureIds ){\n                            // Assure selectedFeatures property exists for the layer\n                            if( !config.layers[featureType]['selectedFeatures'] )\n                                config.layers[featureType]['selectedFeatures'] = [];\n                            var featureIds = config.layers[featureType]['selectedFeatures'];\n                        }\n\n                        // Get Datatable api\n                        var rTable = $(this).DataTable();\n                        var dTable = $(this).dataTable();\n\n                        // Remove class selected for all the lines\n                        rTable\n                        .rows( $(this).find('tr.selected') )\n                        .every(function(){\n                            dTable.fnUpdate( 'z', this, 0, false, false );\n                        })\n                        //~ .draw()\n                        .nodes()\n                        .to$()\n                        .removeClass( 'selected' )\n                        ;\n\n                        // Add class selected from featureIds\n                        // And change lizSelected column value to a\n                        if( featureIds.length > 0 ){\n\n                            var rTable = $(this).DataTable();\n                            rTable.data().each( function(d){\n                                if( $.inArray( d.DT_RowId.toString(), featureIds ) != -1 )\n                                    d.lizSelected = 'a';\n                            });\n                            rTable\n                            .rows( function ( idx, data, node ) {\n                                return data.lizSelected == 'a' ? true : false;\n                            })\n                            .nodes()\n                            .to$()\n                            .addClass( 'selected' )\n                            ;\n                        }\n                    }\n\n                });\n            }\n\n            function refreshTablesAfterEdition( featureType ){\n                // Loop through each datatable, and refresh if it corresponds to the layer edited\n                $('.attribute-table-table[id]').each(function(){\n                    // get table id\n                    var tableId = $(this).attr('id');\n                    // verifying the id\n                    if ( !tableId )\n                        return true;\n\n                    var tableLayerName = $(this).parents('div.dataTables_wrapper:first').prev('input.attribute-table-hidden-layer').val()\n\n                    if ( tableLayerName\n                        && $.fn.dataTable.isDataTable( $(this) )\n                        && lizMap.cleanName( featureType ) == tableLayerName\n                    ){\n                        var zTable = '#' + tableId;\n                        var parentTable = zTable;\n                        var parentLayerCleanName = tableLayerName;\n                        var parentLayerName = featureType;\n                        var zClassNames = $(zTable).attr('class').split(' ');\n                        for(var zKey=0; zKey<zClassNames.length; zKey++) {\n                            if( !zClassNames[zKey].match('child-of-'))\n                                continue;\n\n                            parentLayerCleanName = zClassNames[zKey].substring('child-of-'.length);\n                            parentTable = '#attribute-layer-table-' + parentLayerCleanName;\n                            parentLayerName = attributeLayersDic[parentLayerCleanName];\n                            break;\n                        }\n                        // If child, re-highlight parent feature to refresh all the children\n                        // or update the edition table\n                        if( parentTable != zTable ){\n                            if( zTable.match('edition-table-') ) {\n                                // get info from the form\n                                var formFeatureId = $('#edition-form-container form input[name=\"liz_featureId\"]').val();\n                                var formLayerId = $('#edition-form-container form input[name=\"liz_layerId\"]').val();\n                                // get parent layer config\n                                var getParentLayerConfig = lizMap.getLayerConfigById( formLayerId );\n                                if ( (featureType in config.attributeLayers) && parentLayerName == getParentLayerConfig[0] ) {\n                                    // get featureType layer config\n                                    var featureTypeConfig = config.attributeLayers[featureType];\n                                    //get relation\n                                    var relation = getRelationInfo(formLayerId,featureTypeConfig.layerId);\n                                    if( relation != null ) {\n                                        lizMap.getLayerFeature(parentLayerName, formFeatureId, function(feat) {\n                                            var fp = feat.properties;\n                                            filter = '\"' + relation.referencingField + '\" = ' + \"'\" + fp[relation.referencedField] + \"'\";\n                                            getEditionChildData( featureType, filter, zTable);\n                                        });\n                                    }\n                                }\n                            } else {\n                                var parentHighlighted = config.layers[parentLayerName]['highlightedFeature'];\n                                if( parentHighlighted )\n                                    $(parentTable +' tr#' + parentHighlighted).click();\n                            }\n                        }\n                        // Else refresh main table with no filter\n                        else{\n                            // If not pivot\n                            getDataAndFillAttributeTable(featureType, null, zTable);\n                        }\n                    }\n                });\n            }\n\n            function refreshDatatableSize(container){\n\n                var dtable = $(container).find('table.dataTable');\n                if ( dtable.length == 0 ) {\n                    return;\n                }\n\n                // Adapt height\n                var h = $(container + ' div.attribute-layer-content').height() ? $(container + ' div.attribute-layer-content').height() : 0;\n\n                h -= $(container + ' thead').height() ? $(container + ' thead').height() : 0;\n                h -= $(container + ' div.dataTables_paginate').height() ? $(container + ' div.dataTables_paginate').height() : 0;\n                h -= $(container + ' div.dataTables_filter').height() ? $(container + ' div.dataTables_filter').height() : 0;\n                h -= 20;\n\n                dtable.parent('div.dataTables_scrollBody').height(h);\n\n                // Width : adapt columns size\n                dtable.DataTable().tables().columns.adjust();\n            }\n\n            lizMap.refreshDatatableSize = function(container){\n              return refreshDatatableSize(container);\n            }\n\n            lizMap.events.on({\n\n                layerfeaturehighlighted: function(e) {\n                    config.layers[e.featureType]['highlightedFeature'] = e.fid;\n                    refreshChildrenLayersContent( e.sourceTable, e.featureType, e.fid );\n                },\n\n                layerfeatureselected: function(e) {\n                    refreshLayerSelection( e.featureType, e.fid, e.updateDrawing );\n                },\n\n                layerfeatureunselectall: function(e) {\n                    emptyLayerSelection( e.featureType, e.updateDrawing );\n                },\n\n                layerfeatureselectsearched: function(e) {\n                    setSelectedFeaturesFromSearchedFilter( e.featureType, e.updateDrawing );\n                },\n\n                layerfeaturefilterselected: function(e) {\n                    filterLayerFromSelectedFeatures( e.featureType );\n                },\n\n                layerfeatureremovefilter: function(e) {\n                    emptyLayerFilter( e.featureType );\n                },\n\n                layerSelectionChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Redraw attribute table content ( = add \"selected\" classes)\n                    redrawAttributeTableContent( e.featureType, e.featureIds );\n\n                    // Update openlayers layer drawing\n                    if( e.updateDrawing )\n                        updateMapLayerSelection( e.featureType );\n                },\n\n                layerFilteredFeaturesChanged: function(e) {\n\n                    // Update attribute table tools\n                    updateAttributeTableTools( e.featureType );\n\n                    // Update layer\n                    var cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                    if ( 'cascade' in e )\n                        cascadeToChildren = e.cascade;\n                    updateMapLayerDrawing( e.featureType, cascadeToChildren );\n\n                },\n\n                lizmapeditionfeaturecreated: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId, config.attributeLayers, 'layerId' );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturemodified: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) )\n                            return false;\n                        refreshTablesAfterEdition( featureType );\n                    }\n                },\n\n                lizmapeditionfeaturedeleted: function(e){\n                    var getLayer = lizMap.getLayerConfigById( e.layerId );\n                    if( getLayer ){\n                        var featureType = getLayer[0];\n                        if( !(featureType in config.attributeLayers) ){\n                            return false;\n                        }\n                        refreshTablesAfterEdition( featureType );\n\n                        // Check if the map and tables must be refreshed after this deletion\n                        const cascadeToChildren = $('#jforms_view_attribute_layers_option_cascade_label input[name=\"cascade\"]').prop('checked');\n                        // Get filter status for the layer concerned by the edition\n                        let hasFilter = false;\n                        if (\n                            ('filteredFeatures' in config.layers[featureType] && config.layers[featureType]['filteredFeatures'].length > 0)\n                            || ('request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['filter'])\n                            || ('request_params' in config.layers[featureType] && config.layers[featureType]['request_params']['exp_filter'])\n                        ){\n                            hasFilter = true;\n                        }\n                        if (hasFilter && lizMap.lizmapLayerFilterActive && cascadeToChildren) {\n                            const parentFeatureType = lizMap.lizmapLayerFilterActive;\n                            updateMapLayerDrawing(parentFeatureType, cascadeToChildren);\n                        }\n                    } // todo : only remove line corresponding to deleted feature ?\n                },\n\n                // Filter layer when using \"Locate by layer\" tool\n                lizmaplocatefeaturechanged: function(e){\n                    if( !( e.featureType in config.attributeLayers) || startupFilter )\n                        return false;\n\n                    var aConfig = config.locateByLayer[e.featureType];\n                    var triggerFilterOnLocate = false;\n\n                    if( 'filterOnLocate' in aConfig && aConfig.filterOnLocate == 'True' )\n                        triggerFilterOnLocate = true;\n\n                    if( !triggerFilterOnLocate )\n                        return false;\n\n                    // Select feature\n                    lizMap.events.triggerEvent('layerfeatureselected',\n                        {'featureType': e.featureType, 'fid': e.featureId, 'updateDrawing': false}\n                    );\n                    // Filter selected feature\n                    lizMap.events.triggerEvent('layerfeaturefilterselected',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                lizmaplocatefeaturecanceled: function(e){\n\n                    lizMap.events.triggerEvent('layerfeatureremovefilter',\n                        {'featureType': e.featureType}\n                    );\n                },\n\n                lizmapeditionformdisplayed: function(e) {\n                    $('#edition-children-container').hide().html('');\n\n                    var fid =  e.featureId;\n                    // Do not disply child if it's a creation\n                    if ( !fid || fid == '' )\n                        return;\n\n                    var layerId = e.layerId;\n                    var getLayerConfig = lizMap.getLayerConfigById( layerId );\n\n                    if( getLayerConfig && 'relations' in lizMap.config && layerId in lizMap.config.relations ) {\n                        var relations = lizMap.config.relations[layerId];\n                        var featureType = getLayerConfig[0];\n                        var featureId = featureType + '.' + fid;\n                        if ( relations.length > 0 ) {\n                            var childHtml = getChildrenHtmlContent( featureType );\n                            var html = '';\n                            // Add children content\n                            if( childHtml ){\n                                // Add buttons to create new children\n                                if( childHtml['childCreateButton'] ) {\n                                    // Action bar\n                                    html+= '<div class=\"attribute-layer-action-bar\">';\n                                    html+= childHtml['childCreateButton'];\n                                    html+= '</div>';\n                                }\n                                // Add children content : one tab per childlayer\n                                html+= '<div class=\"tabbable edition-children-content\">';\n                                // Ul content\n                                html+= '    <ul class=\"nav nav-tabs\">';\n                                for( var i in childHtml['tab-li'] ){\n                                    var cLi = childHtml['tab-li'][i];\n                                    html+= cLi;\n                                }\n                                html+= '    </ul>';\n                                html+= '    <div class=\"tab-content\">';\n                                // Tab content\n                                for( var i in childHtml['tab-content'] ){\n                                    var cDiv = childHtml['tab-content'][i];\n                                    html+= cDiv;\n                                }\n                                html+= '    </div>'; // tab-content\n                                html+= '</div>'; // tabbable\n                            }\n                            $('#edition-children-container').show().append(html);\n                            $('#edition-children-container div.tabbable div.tab-pane input.attribute-table-hidden-parent-layer').after(\n                                '<input class=\"attribute-table-hidden-parent-feature-id\" value=\"'+fid+'\" type=\"hidden\">'\n                            );\n                            $('#edition-children-container div.tabbable ul.nav-tabs li').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/nav-tab-attribute-child-tab-/g, 'nav-tab-edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable ul.nav-tabs li a').each(function() {\n                                $(this).attr('href', $(this).attr('href').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content div.tab-pane').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-child-tab-/g, 'edition-child-tab-'));\n                            });\n                            $('#edition-children-container div.tabbable div.tab-content table').each(function() {\n                                $(this).attr('id', $(this).attr('id').replace(/attribute-layer-/g, 'edition-'));\n                            });\n\n                            // Bind click on createFeature button\n                            $('#edition-children-container button.btn-createFeature-attributeTable')\n                            .click(function(){\n                                var parentLayerId = layerId;\n                                var aName = attributeLayersDic[ $(this).val() ];\n                                lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                    var lid = config.layers[aName]['id'];\n                                    lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                });\n                                return false;\n                            })\n                            .hover(\n                                function(){ $(this).addClass('btn-primary'); },\n                                function(){ $(this).removeClass('btn-primary'); }\n                            );\n\n                            // Bind click on createFeature button via dropDown\n                            $('#edition-children-container a.btn-createFeature-attributeTable')\n                            .click(function(){\n                                var parentLayerId = layerId;\n                                var selectedValue = $(this).attr('href').replace('#', '');\n                                var aName = attributeLayersDic[ selectedValue ];\n                                lizMap.getLayerFeature(featureType, fid, function(parentFeat) {\n                                    var lid = config.layers[aName]['id'];\n                                    lizMap.launchEdition( lid, null, {layerId:parentLayerId,feature:parentFeat});\n                                    $(this).blur();\n                                });\n                                return false;\n                            })\n                            .hover(\n                                function(){ $(this).addClass('btn-primary'); },\n                                function(){ $(this).removeClass('btn-primary'); }\n                            );\n                            lizMap.getLayerFeature(featureType, fid, function(feat) {\n                                var fp = feat.properties;\n                                for ( var i=0, len=relations.length; i<len; i++ ){\n                                    var r = relations[i];\n                                    var rLayerId = r.referencingLayer;\n                                    var rGetLayerConfig = lizMap.getLayerConfigById( rLayerId );\n                                    if ( rGetLayerConfig ) {\n                                        var rLayerName = rGetLayerConfig[0];\n                                        var rConfigLayer = rGetLayerConfig[1];\n                                        var filter = '\"' + r.referencingField + '\" = ' + \"'\" + fp[r.referencedField] + \"'\";\n                                        // Get child table id\n                                        var childTable = '#edition-table-' + lizMap.cleanName(featureType) + '-' + lizMap.cleanName(rLayerName);\n\n                                        // Fill in attribute table for child\n                                        if( rLayerName in config.attributeLayers ) {\n                                            getEditionChildData( rLayerName, filter, childTable );\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    }\n                },\n\n                bottomdocksizechanged: function(evt) {\n                    var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                    refreshDatatableSize('#'+mycontainerId);\n                },\n                dockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                dockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockopened: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                },\n                rightdockclosed: function(evt) {\n                    if($('#mapmenu li.attributeLayers').hasClass('active')){\n                        var mycontainerId = $('#bottom-dock div.bottom-content.active div.attribute-layer-main').attr('id');\n                        refreshDatatableSize('#'+mycontainerId);\n                    }\n                }\n\n            }); // lizMap.events.on end\n\n            // Extend lizMap API\n            lizMap.getAttributeFeatureData = getAttributeFeatureData;\n\n        } // uicreated\n    });\n\n}();\n"],"names":["lizMap","events","on","evt","config","hasAttributeTableLayers","layers","attributeLayersDic","wfsTypenameMap","mediaLinkPrefix","OpenLayers","Util","urlAppend","lizUrls","media","getParameterString","params","startupFilter","lizLayerFilter","lizmapLayerFilterActive","limitDataToBbox","options","featureTypes","getVectorLayerFeatureTypes","length","$","css","attributeLayersSorted","lname","attributeLayers","al","name","push","sort","a","b","order","i","cleanName","featureType","typeName","getElementsByTagName","textContent","layername","getNameByTypeName","undefined","configLayerName","atConfig","layer","map","getLayersByName","triggerEvent","loadProjDefinition","crs","aProj","Projection","bbox","parseFloat","getAttribute","hide","hasDiplayedAttributeTable","tHtml","idx","lizDict","getDataAndFillAttributeTable","layerName","filter","tableSelector","callBack","layerConfig","typename","wfsParams","TYPENAME","GEOMETRYNAME","mainLizmap","getView","calculateExtent","getProjection","getCode","fetchRequests","wfs","getFeature","namedRequests","describeFeatureTypeRequest","describeFeatureType","allColumnsKeyValues","responseOrder","fieldName","keyValueConfig","fieldConf","type","data","getSourceLayer","getLayerConfigById","source_layer_id","source_typename","PROPERTYNAME","code_field","label_field","EXP_FILTER","exp_filter","document","body","style","cursor","Promise","all","then","responses","index","columnName","Object","keys","find","key","keyField","valueField","keyValue","features","forEach","feature","properties","describeFeatureTypeResponse","aliases","types","columns","aName","aTable","cFeatures","cAliases","cTypes","aCallback","lConfig","isChild","parentLayerID","includes","replace","parentLayerName","startsWith","split","hiddenFields","trim","canEdit","canDelete","editionLayers","capabilities","modifyAttribute","modifyGeometry","deleteFeature","atFeatures","dataLength","cdc","firstDisplayedColIndex","colConf","hasOwnProperty","columnKeyValues","row","meta","Array","isArray","join","toString","substring","slice","displayLabels","stringData","splitValues","s","splitValue","rdata","colMeta","settings","aoColumns","col","title","colToReturn","isEmptyObject","atc","lizcols","newcolumns","newpos","x","colx","attributes","fieldname","colhidden","hidden","splice","cfrom","newcolumnsfinal","concat","createDatatableColumns","ff","formatDatatableFeatures","foundFeatures","dataSet","refillFeatures","fn","dataTable","isDataTable","oTable","fnClearTable","fnAddData","searchWhileTyping","myDom","e","searchVal","this","value","lizdelay","fnFilter","initComplete","json","Api","table","node","id","language","url","deferRender","createdRow","dataIndex","inArray","DT_RowId","addClass","lizSelected","dom","pageLength","scrollY","scrollX","next","click","val","focus","keyup","unbind","removeClass","featId","querySelector","fid","feat","parentLayerCleanName","html","getFeaturePopupContent","append","bindTableLineClick","refreshDatatableSize","attr","edition","fetchEditableFeatures","show","buildLayerAttributeDatatable","catch","buildLinkParameters","layerId","lp","getP","idSelected","fi","primaryKey","intRegex","afeat","pk","test","getChildrenHtmlContent","childHtml","childDiv","childLi","childCreateButton","childCreateButtonItems","layerLinkButton","layerLinkButtonItems","parentLayerId","relations","layerRelations","childCount","childActive","lid","relation","childLayerConfigA","referencingLayer","childLayerConfig","childLayerName","childAttributeLayerConfig","tabId","cDiv","tId","tClass","cLi","canCreateChild","createFeature","ms","getScale","maxScale","minScale","msg","addMessage","liHtml","selClass","filClass","canPopup","canCreate","alc","exportLayers","exportFormats","getVectorLayerResultFormat","len","format","toLowerCase","tooltip","placement","tabContentId","parent","remove","tab","target","DataTable","tables","adjust","hover","parentDir","parents","toggleClass","toggle","hasClass","dTable","previousOrder","grep","o","newOrder","draw","scrollTop","eFormat","text","eName","exportVectorLayer","blur","parentFeatId","getLayerFeature","parentFeat","launchEdition","selectedValue","cName","cId","attrConfig","p","pName","pId","doQuery","pivot","parId","par","parKey","chi","rp","rpItem","referencingField","service","post","features1","features2","addLayerDiv","change","doCascade","prop","updateAttributeTableTools","cascadeToChildren","updateMapLayerDrawing","moveend","btitle","timer","callback","clearTimeout","setTimeout","refreshLayerAttributeDatatable","selectedFeatures","line","getEditionChildData","childTable","one","cells","nodes","to$","children","createHeader","column","header","tabPane","getLayerNameByCleanName","emptyLayerSelection","arefresh","updateLayer","typeNamePile","typeNameFilter","typeNameDone","cascade","shift","aFilter","getFeatureData","aNameFilter","aNameFeatures","aNameAliases","aNameTypes","wmsName","shortname","typeNameId","typeNamePkey","typeNamePkeyValues","typeNameChildren","getAttributeLayerConfig","attributeLayerConfig","childParam","buildChildParam","pivotParam","getPivotParam","filteredFeatures","cData","lFilter","layerN","simpleFilter","surl","wms","sdata","request","result","token","geometryType","redraw","opTable","cFilter","cExpFilter","referencedField","applyEmptyLayerFilter","applyLayerFilter","trFilteredBgcolor","childLayerKeyName","relationIsPivot","isPivot","otherParentId","otherParentRelation","otherParentTypeName","rx","otherParentConfig","aLayerRelations","xx","getFeatureRequest","getDataAndRefreshAttributeTable","console","log","ids","selIds","filIds","refreshTablesAfterEdition","each","tableId","tableLayerName","prev","zTable","parentTable","zClassNames","zKey","match","formFeatureId","formLayerId","getParentLayerConfig","childLayerId","lridx","getRelationInfo","fp","parentHighlighted","container","dtable","h","height","layerfeaturehighlighted","sourceTable","refreshChildrenLayersContent","layerfeatureselected","rupdateDrawing","refreshLayerSelection","updateDrawing","layerfeatureunselectall","layerfeatureselectsearched","supdateDrawing","hasChanged","sIds","filteredrowids","rows","setSelectedFeaturesFromSearchedFilter","layerfeaturefilterselected","filterLayerFromSelectedFeatures","layerfeatureremovefilter","emptyLayerFilter","layerSelectionChanged","featureIds","rTable","every","fnUpdate","d","request_params","updateMapLayerSelection","layerFilteredFeaturesChanged","lizmapeditionfeaturecreated","getLayer","lizmapeditionfeaturemodified","lizmapeditionfeaturedeleted","hasFilter","lizmaplocatefeaturechanged","aConfig","locateByLayer","triggerFilterOnLocate","filterOnLocate","featureId","lizmaplocatefeaturecanceled","lizmapeditionformdisplayed","getLayerConfig","after","r","rLayerId","rGetLayerConfig","rLayerName","bottomdocksizechanged","dockopened","dockclosed","rightdockopened","rightdockclosed","getAttributeFeatureData","aFeatureID","aGeometryName","aCallBack","qgisName","getNameByCleanName"],"sourceRoot":""}