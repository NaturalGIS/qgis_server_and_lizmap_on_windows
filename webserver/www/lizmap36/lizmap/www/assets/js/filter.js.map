{"version":3,"file":"../../lizmap/www/assets/js/filter.js","mappings":"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","sources":["webpack://assets/./src/legacy/filter.js"],"sourcesContent":["var lizLayerFilterTool = function () {\n\n    lizMap.events.on({\n        'uicreated': function () {\n\n            // If filterConfig is empty, there is no filter set => hide filter tool\n            if (!filterConfig || (filterConfig.constructor === Object && Object.keys(filterConfig).length === 0)) {\n                $('#mapmenu li.filter.nav-dock').addClass('hide');\n                return true;\n            }\n\n\n            // Compute the HTML container for the form\n            function getLayerFilterDockRoot() {\n                var html = '';\n\n                html += '<div class=\"menu-content\">';\n                // Add combo box to select the layer\n                html += '<select id=\"liz-filter-layer-selector\">';\n                var flayers = {};\n                for (var o in filterConfig) {\n                    var conf = filterConfig[o];\n                    if (!(conf.layerId in flayers)) {\n                        // Get layer\n                        var layerId = conf.layerId;\n                        var lconfig_get = lizMap.getLayerConfigById(layerId);\n                        if (!lconfig_get)\n                            continue;\n                        var lname = lconfig_get[0];\n                        var lconf = lconfig_get[1];\n                        var displayName = lname;\n                        if ('title' in lconf && lconf.title != '') {\n                            displayName = lconf.title;\n                        }\n                        html += '<option value=\"' + layerId + '\">' + displayName + '</option>';\n                        flayers[layerId] = true;\n                    }\n                }\n                html += '</select></br>';\n\n                // Add total feature counter\n                var total = 0\n                html += '<b><span id=\"liz-filter-item-layer-total-count\">' + total + '</span> ' + lizDict['filter.label.features'] + '</b>';\n\n                // Add zoom link\n                html += '<br/><button id=\"liz-filter-zoom\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.zoom.title'] + '\">' + lizDict['filter.btn.zoom.label'] + '</button>';\n\n                // Add export button\n                if (lizMap.getVectorLayerResultFormat().includes('ODS')) {\n                    html += '&nbsp;&nbsp;<button id=\"liz-filter-export\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.export.title'] + '\">' + lizDict['filter.btn.export.label'] + '</button>';\n                }\n\n                // Add unfilter link\n                html += '&nbsp;&nbsp;<button id=\"liz-filter-unfilter\" class=\"btn btn-mini btn-primary\" title=\"' + lizDict['filter.btn.reset.title'] + '\">' + lizDict['filter.btn.reset.label'] + '</button>';\n\n                html += '</div>';\n\n                // Add tree\n                html += '<div style=\"padding:10px 10px;\" class=\"tree menu-content\"></div>';\n\n                return html;\n            }\n\n            function addLayerFilterToolInterface() {\n                if (!filterConfig || (filterConfig.constructor === Object && Object.keys(filterConfig).length === 0)) {\n                    return false;\n                }\n\n                // Build interface html code\n                // Add dock\n                var html = getLayerFilterDockRoot();\n                $('#filter-content').html(html);\n\n                // Get 1st layer found as default layer\n                var layerId = filterConfig[0]['layerId'];\n                filterConfigData.layerId = layerId;\n\n                // Activate the unfilter link\n                $('#liz-filter-unfilter').click(function () {\n                    // Remove filter\n                    deactivateFilter();\n                    return false;\n                });\n\n                // Activate the zoom button\n                $('#liz-filter-zoom').click(function () {\n                    zoomToFeatures()\n                    return false;\n                });\n\n                // Activate the export button\n                if (lizMap.getVectorLayerResultFormat().includes('ODS')) {\n                    $('#liz-filter-export').click(function () {\n                        lizMap.config.layers[filterConfigData.layerName].request_params['filter'] = filterConfigData.filter;\n                        lizMap.exportVectorLayer(filterConfigData.layerName, 'ODS', false);\n                        delete lizMap.config.layers[filterConfigData.layerName].request_params['filter'];\n                        return false;\n                    });\n                }\n\n                // Add tooltip\n                $('#filter-content [title]').tooltip();\n            }\n\n            // Launch the form filter feature\n            function launchLayerFilterTool(layerId) {\n\n                // Get layer name\n                var getConfig = lizMap.getLayerConfigById(layerId);\n                if (!getConfig)\n                    return false;\n                var layerName = getConfig[0];\n                filterConfigData.layerName = layerName;\n\n                // Remove previous field inputs\n                $('div.liz-filter-field-box').remove();\n\n                // Get html and add it\n                getLayerFilterForm();\n\n                // Limit dock size\n                adaptLayerFilterSize();\n\n                // Get Feature count\n                getFeatureCount();\n\n                // Set default zoom extent setZoomExtent\n                // Only if first query works\n                // Which means PHP spatialite extension is activated\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent();\n                }\n            }\n\n            // Get the HTML form\n            // By getting form element for each field\n            function getLayerFilterForm() {\n                var layerId = filterConfigData.layerId;\n\n                // Sort attribute layers as given by creation order in Lizmap plugin\n                var formFilterLayersSorted = [];\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item.layerId == layerId) {\n                        formFilterLayersSorted.push(field_item);\n                        $(\"#filter div.tree\").append('<div id=\"filter-field-order' + String(field_item.order) + '\"></div>');\n                    }\n                }\n\n                // Add form fields\n                for (var conf in formFilterLayersSorted) {\n\n                    var field_item = formFilterLayersSorted[conf];\n                    getFormFieldInput(field_item);\n                }\n            }\n\n            // Get the HTML form element for a specific field\n            function getFormFieldInput(field_item) {\n                var field_config = filterConfig[field_item.order];\n\n                // unique values\n                if (field_config['type'] == 'uniquevalues') {\n                    return uniqueValuesFormInput(field_item);\n                }\n\n                // date\n                if (field_config['type'] == 'date') {\n                    return dateFormInput(field_item);\n                }\n\n                // numeric\n                if (field_config['type'] == 'numeric') {\n                    return numericFormInput(field_item);\n                }\n\n                // text\n                if (field_config['type'] == 'text') {\n                    return textFormInput(field_item);\n                }\n\n                return '';\n            }\n\n            function getFormFieldHeader(field_item) {\n                var html = '';\n                html += '<div class=\"liz-filter-field-box\" id=\"liz-filter-box-';\n                html += lizMap.cleanName(field_item.title);\n                html += '\">';\n                var flabel = field_item.title;\n                html += '<span style=\"font-weight:bold;\">' + flabel + '</span>';\n                html += '<button class=\"btn btn-primary btn-mini pull-right liz-filter-reset-field\" title=\"' + lizDict['filter.btn.reset.title'] + '\" value=\"' + field_item.order + '\">x</button>';\n                html += '<p>';\n\n                return html;\n            }\n\n            function getFormFieldFooter() {\n                var html = '';\n                html += '</p>';\n                html += '</div>';\n\n                return html;\n            }\n\n            function checkResult(result) {\n                if (!result) {\n                    return false;\n                }\n                if ('status' in result && result['status'] == 'error') {\n                    console.log(result.title + ': ' + result.detail);\n                    return false;\n                }\n                return true;\n            }\n\n            // Get the HTML form element for the date field type\n            function dateFormInput(field_item) {\n                // max_date = min_date when undefined\n                const max_date = ('max_date' in field_item) ? field_item.max_date : field_item.min_date;\n\n                var sdata = {\n                    request: 'getMinAndMaxValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item.min_date + ',' + max_date,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    for (var a in result) {\n                        var feat = result[a];\n                        // Add minutes to time zone offset when not present (needed for Firefox).\n                        if (feat['min'][feat['min'].length - 3] === '+') {\n                            feat['min'] = feat['min'] + ':00';\n                        }\n                        if (feat['max'][feat['max'].length - 3] === '+') {\n                            feat['max'] = feat['max'] + ':00';\n                        }\n                        var dmin = formatDT(new Date(feat['min']), 'yy-mm-dd');\n                        var dmax = formatDT(new Date(feat['max']), 'yy-mm-dd');\n                        filterConfig[field_item.order]['min'] = dmin;\n                        filterConfig[field_item.order]['max'] = dmax;\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<span style=\"white-space:nowrap\">';\n                    html += '<input id=\"liz-filter-field-min-date' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-date\" value=\"' + field_item['min'] + '\" style=\"width:100px;\">';\n                    html += '<input id=\"liz-filter-field-max-date' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-date\" value=\"' + field_item['max'] + '\" style=\"width:100px;\">';\n                    html += '</span>';\n\n                    // http://jsfiddle.net/Lcrsd3jt/45/\n                    // pour avoir un date et time picker, see https://github.com/trentrichardson/jQuery-Timepicker-Addon\n                    html += '<div id=\"liz-filter-datetime-range' + lizMap.cleanName(field_item.title) + '\">';\n                    html += '    <div>';\n                    html += '        <div id=\"liz-filter-slider-range' + lizMap.cleanName(field_item.title) + '\"></div>';\n                    html += '    </div>';\n                    html += '</div>';\n\n                    html += getFormFieldFooter(field_item);\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n                    $(\"#filter input.liz-filter-field-date\").datepicker({\n                        dateFormat: 'yy-mm-dd',\n                        changeMonth: true,\n                        changeYear: true,\n                        minDate: new Date(feat['min']),\n                        maxDate: new Date(feat['max'])\n                    });\n\n                    addFieldEvents(field_item);\n\n                }, 'json');\n\n            }\n\n            // Get the HTML form element for the numeric field type\n            function numericFormInput(field_item) {\n                var sdata = {\n                    request: 'getMinAndMaxValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item['field'],\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    for (var a in result) {\n                        var feat = result[a];\n                        filterConfig[field_item.order]['min'] = Number(feat['min']);\n                        filterConfig[field_item.order]['max'] = Number(feat['max']);\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<span style=\"white-space:nowrap\">';\n                    html += '<input id=\"liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title) + '\" type=\"number\" value=\"' + field_item['min'] + '\" step=\"' + 1 + '\" min=\"' + field_item['min'] + '\" max=\"' + field_item['max'] + '\" class=\"liz-filter-field-numeric\" style=\"width:100px;\">';\n                    html += '<input id=\"liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title) + '\" type=\"number\" value=\"' + field_item['max'] + '\" step=\"' + field_item['step'] + '\" min=\"' + field_item['min'] + '\" max=\"' + field_item['max'] + '\" class=\"liz-filter-field-numeric\" style=\"width:100px;\">';\n                    html += '</span>';\n\n                    html += '<div id=\"liz-filter-numeric-range' + lizMap.cleanName(field_item.title) + '\">';\n                    html += '    <div>';\n                    html += '        <div id=\"liz-filter-slider-range' + lizMap.cleanName(field_item.title) + '\"></div>';\n                    html += '    </div>';\n                    html += '</div>';\n\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n\n                    addFieldEvents(field_item);\n\n                }, 'json');\n\n            }\n\n            // Get the HTML form element for the text field type\n            function textFormInput(field_item) {\n                // Ajout des données d'autocompletion\n                var field = field_item['field'];\n                var sdata = {\n                    request: 'getUniqueValues',\n                    layerId: field_item.layerId,\n                    fieldname: field,\n                    filter: ''\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    var autocompleteData = [];\n                    for (var a in result) {\n                        var feat = result[a];\n                        if (feat['v'] === null || !feat['v'] || (typeof feat['v'] === 'string' && feat['v'].trim() === ''))\n                            continue;\n                        autocompleteData.push(feat['v']);\n                    }\n\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n                    html += '<div style=\"width: 100%;\">'\n                    html += '<input id=\"liz-filter-field-text' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-text\" value=\"\" title=\"' + lizDict['filter.input.text.title'] + '\" placeholder=\"' + lizDict['filter.input.text.placeholder'] + '\">';\n                    html += '</div>'\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n                    addFieldEvents(field_item);\n\n                    $(\"#liz-filter-field-text\" + lizMap.cleanName(field_item.title)).autocomplete({\n                        source: autocompleteData,\n                        autoFocus: false, // do not autofocus, because this prevents from searching with LIKE\n                        delay: 200,\n                        minLength: 2,\n                        select: function (event, ui) {\n                            $(this).val(ui.item.value);\n                            $(this).change();\n                        }\n                    });\n                }, 'json');\n            }\n\n            // Get the HTML form element for the uniqueValues field type\n            // possible format: checkboxes or select\n            function uniqueValuesFormInput(field_item) {\n\n                // Get data\n                const fetchRequests = [];\n\n                // Get unique values data (and counters)\n                var sdata = {\n                    request: 'getUniqueValues',\n                    layerId: field_item.layerId,\n                    fieldname: field_item.field,\n                    filter: ''\n                };\n\n                fetchRequests.push(\n                    fetch(filterConfigData.url + '&' + new URLSearchParams(sdata)).then(response => {\n                        return response.json();\n                    })\n                );\n\n                // Get keys/values if defined\n                let keyValues = {};\n\n                const layerName = lizMap.getLayerConfigById(field_item.layerId)[0];\n                const fieldConf = lizMap.keyValueConfig[layerName]?.[field_item.field];\n                if (fieldConf) {\n                    if (fieldConf.type == 'ValueMap') {\n                        keyValues = fieldConf.data;\n                    } else {\n                        // Get source layer typename from it ID\n                        let getSourceLayer = lizMap.getLayerConfigById(fieldConf.source_layer_id);\n                        if( getSourceLayer && getSourceLayer.length == 2) {\n                            let source_typename = getSourceLayer[1].typename;\n                            if (source_typename != undefined) {\n                                fetchRequests.push(\n                                    lizMap.mainLizmap.wfs.getFeature({\n                                        TYPENAME: source_typename,\n                                        PROPERTYNAME: fieldConf.code_field + ',' + fieldConf.label_field,\n                                        // we must not use null for exp_filter but '' if no filter is active\n                                        EXP_FILTER: fieldConf.exp_filter ? fieldConf.exp_filter : ''\n                                    })\n                                );\n                            }\n                        }\n\n                    }\n                }\n\n                Promise.all(fetchRequests).then(responses => {\n                    const [result, rawKeyValues] = responses;\n\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n\n                    if (rawKeyValues) {\n                        rawKeyValues.features.forEach(feature => keyValues[feature.properties[fieldConf.code_field]] = feature.properties[fieldConf.label_field]);\n                    }\n\n                    // Build UI\n                    var html = '';\n                    html += getFormFieldHeader(field_item);\n\n                    if (field_item.format == 'select') {\n                        html += '<select id=\"liz-filter-field-' + lizMap.cleanName(field_item.title) + '\" class=\"liz-filter-field-select\">';\n                        html += '<option value=\"\"> --- </option>';\n                        html += '</select>';\n                    }\n                    html += getFormFieldFooter(field_item);\n\n                    $(\"#filter-field-order\" + String(field_item.order)).append(html);\n\n                    if (!('items' in filterConfig[field_item.order])) {\n                        filterConfig[field_item.order]['items'] = {};\n                    }\n\n                    for (const feat of result) {\n                        filterConfig[field_item.order]['items'][feat['v']] = feat['c'];\n                    }\n\n                    var dhtml = '';\n                    var fkeys = Object.keys(\n                        filterConfig[field_item.order]['items']\n                    );\n\n                    // Order fkeys alphabetically (which means sort checkboxes for each field)\n                    fkeys.sort(function (a, b) {\n                        return a.localeCompare(b);\n                    });\n\n                    for (const f_val of fkeys) {\n                        // Replace key by value if defined\n                        var label = keyValues.hasOwnProperty(f_val) ? keyValues[f_val] : f_val;\n\n                        if (field_item.format == 'select') {\n                            dhtml += `<option value=\"${lizMap.cleanName(f_val)}\">&nbsp;${label}</option>`;\n                        } else {\n                            var inputId = 'liz-filter-field-' + lizMap.cleanName(field_item.title) + '-' + lizMap.cleanName(f_val);\n                            dhtml += `<label class=\"checkbox\"><input id=\"${inputId}\" class=\"liz-filter-field-value\" type=\"checkbox\" value=\"${lizMap.cleanName(f_val)}\">&nbsp;${label}</label>`;\n                        }\n                    }\n                    var id = 'liz-filter-box-' + lizMap.cleanName(field_item.title);\n                    if (field_item.format == 'select') {\n                        $('#' + id + ' select').append(dhtml);\n                    } else {\n                        $('#' + id + ' p').append(dhtml);\n                    }\n\n                    addFieldEvents(field_item);\n                });\n            }\n\n            // Generate filter string for a field\n            // Depending on the selected inputs\n            function setFormFieldFilter(field_item) {\n                if (filterConfigData.deactivated) {\n                    return false;\n                }\n\n                // Set filter depending on field type\n                // Unique values\n                if (field_item.type == 'uniquevalues') {\n                    setUniqueValuesFilter(field_item);\n                }\n\n                // Dates\n                if (field_item.type == 'date') {\n                    setDateFilter(field_item);\n                }\n\n                // Numeric\n                if (field_item.type == 'numeric') {\n                    setNumericFilter(field_item);\n                }\n\n                // Texte\n                if (field_item.type == 'text') {\n                    setTextFilter(field_item);\n                }\n\n                // Update global form filter\n                activateFilter();\n            }\n\n            // Set the filter for the uniqueValues field type\n            function setUniqueValuesFilter(field_item) {\n                var field_config = filterConfig[field_item.order]\n\n                // First loop through each field value\n                // And check if the item (e.g checkbox) is selected or not\n                filterConfig[field_item.order]['data'] = {}\n                var allchecked = true;\n                var nonechecked = true;\n                if (field_config.format == 'select') {\n                    var selectId = '#liz-filter-field-' + lizMap.cleanName(field_item.title);\n                    var selectVal = $(selectId).val();\n                    var clist = [];\n                    for (var f_val in filterConfig[field_item.order]['items']) {\n                        // Get checked status\n                        if (Array.isArray(selectVal)) {\n                            var achecked = selectVal.includes(lizMap.cleanName(f_val));\n                        } else {\n                            var achecked = (selectVal == lizMap.cleanName(f_val));\n                        }\n                        if (!achecked) {\n                            allchecked = false;\n                        } else {\n                            nonechecked = false;\n                            clist.push(f_val.replace(/'/g, \"''\"));\n                        }\n                        filterConfig[field_item.order]['data'][f_val] = achecked;\n                    }\n                }\n                if (field_config.format == 'checkboxes') {\n                    var clist = [];\n                    for (var f_val in filterConfig[field_item.order]['items']) {\n                        // Get checked status\n                        var inputId = '#liz-filter-field-' + lizMap.cleanName(field_item.title) + '-' + lizMap.cleanName(f_val);\n                        var achecked = $(inputId).is(':checked');\n                        if (!achecked) {\n                            allchecked = false;\n                        } else {\n                            nonechecked = false;\n                            clist.push(f_val.replace(/'/g, \"''\"));\n                        }\n                        filterConfig[field_item.order]['data'][f_val] = achecked;\n                    }\n                }\n                filterConfig[field_item.order]['allchecked'] = allchecked;\n                filterConfig[field_item.order]['nonechecked'] = nonechecked;\n                filterConfig[field_item.order]['selected'] = clist;\n                var filter = null;\n                var field = field_item['field'];\n                if (clist.length) {\n                    // If there is a separator in the field values, and we need\n                    // to explode the values into single items, we need to use\n                    // LIKE statements joined with OR\n                    if ('splitter' in field_item && field_item['splitter'] != '') {\n\n                        filter = ' ( ';\n                        var sep = '';\n                        var lk = 'LIKE';\n\n                        // For a PostgreSQL layer, we can use ILIKE instead of LIKE\n                        // for WMS filtered requests to be case insensitive\n                        if (field_item.provider == 'postgres') {\n                            lk = 'ILIKE';\n                        }\n                        for (var i in clist) {\n                            var cval = clist[i];\n                            filter += sep + '\"' + field + '\"' + \" \" + lk + \" '%\" + cval + \"%' \";\n                            // We need to use a OR to display features with\n                            // 'Theatre, Culture' or 'Theatre', or 'Culture, Information'\n                            // When 'Theatre' and 'Culture' are checked in the list\n                            sep = ' OR ';\n                        }\n                        filter += ' ) ';\n                    } else {\n                        // If there is not separator in the field values, use IN to get all features\n                        // corresponding to one of the checked values\n                        filter = '\"' + field + '\"' + \" IN ( '\" + clist.join(\"' , '\") + \"' ) \";\n                    }\n                }\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for the Date type\n            function setDateFilter(field_item) {\n                var filters = [];\n\n                // get input values\n                var min_id = '#liz-filter-field-min-date' + lizMap.cleanName(field_item.title);\n                var max_id = '#liz-filter-field-max-date' + lizMap.cleanName(field_item.title);\n                var min_val = $(min_id).val().trim();\n                var max_val = $(max_id).val().trim();\n\n                // Do nothing if min and max values entered equals the field min and max possible values\n                if (min_val == field_item['min'] && max_val == field_item['max']) {\n                    filterConfig[field_item.order]['filter'] = null;\n                    return true;\n                }\n\n                // fields\n                var startField = field_item.min_date;\n                var endField = ('max_date' in field_item) ? field_item.max_date : field_item.min_date;\n\n                // min date filter\n                if (min_val && Date.parse(min_val)) {\n                    filters.push('( \"' + startField + '\"' + \" >= '\" + min_val + \"'\" + \" OR \" + ' \"' + endField + '\"' + \" >= '\" + min_val + \"' )\");\n                } else {\n                    min_val = null;\n                }\n\n                // max date filter\n                if (max_val && Date.parse(max_val)) {\n                    filters.push('( \"' + startField + '\"' + \" <= '\" + max_val + \"'\" + \" OR \" + ' \"' + endField + '\"' + \" <= '\" + max_val + \"' )\");\n                } else {\n                    max_val = null;\n                }\n\n                var filter = null;\n                if (filters.length) {\n                    var filter = ' ( ';\n                    filter += filters.join(' AND ');\n                    filter += ' ) ';\n                }\n                filterConfig[field_item.order]['data'] = {\n                    'min_date': min_val,\n                    'max_date': max_val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for the Numeric type\n            function setNumericFilter(field_item) {\n                var filters = [];\n\n                // get input values\n                var min_id = '#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title);\n                var max_id = '#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title);\n                var min_val = $(min_id).val().trim();\n                var max_val = $(max_id).val().trim();\n\n                // Do nothing if min and max values entered equals the field min and max possible values\n                if (min_val == field_item['min'] && max_val == field_item['max']) {\n                    filterConfig[field_item.order]['filter'] = null;\n                    return true;\n                }\n\n                // field\n                var field = field_item['field'];\n\n                // min value filter\n                if (min_val != '') {\n                    filters.push('( \"' + field + '\"' + \" >= '\" + min_val + \"' )\");\n                } else {\n                    min_val = null;\n                }\n\n                // max value filter\n                if (max_val != '') {\n                    filters.push('( \"' + field + '\"' + \" <= '\" + max_val + \"' )\");\n                } else {\n                    max_val = null;\n                }\n\n                var filter = null;\n                if (filters.length) {\n                    var filter = ' ( ';\n                    filter += filters.join(' AND ');\n                    filter += ' ) ';\n                }\n                filterConfig[field_item.order]['data'] = {\n                    'min': min_val,\n                    'max': max_val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n\n            }\n\n            // Set the filter for a text field_item\n            function setTextFilter(field_item) {\n\n                var id = '#liz-filter-field-text' + lizMap.cleanName(field_item.title);\n                var val = $(id).val().trim().replace(/'/g, \"''\");\n\n                filterConfig[field_item.order]['data'] = {\n                    'text': val\n                };\n                var filter = null;\n                var lk = 'LIKE';\n                if (field_item.provider == 'postgres') {\n                    lk = 'ILIKE';\n                }\n                var field = field_item['field'];\n                if (val) {\n                    filter = '\"' + field + '\"' + \" \" + lk + \" '%\" + val + \"%'\";\n                }\n\n                filterConfig[field_item.order]['data'] = {\n                    'text': val\n                };\n                filterConfig[field_item.order]['filter'] = filter;\n            }\n\n            /**\n             * Get the list of feature ids for a given filter.\n             *\n             * This is needed to trigger the filter with the selection tool\n             *\n             * @param {string} filter - The SQL like filter\n             *\n             */\n            function getFilteredFeatureIds(filter, pkField, aCallBack) {\n                filter = typeof filter !== 'undefined' ? filter : '';\n                var layerId = filterConfigData.layerId;\n                var field = pkField;\n                var sdata = {\n                    request: 'getUniqueValues',\n                    layerId: layerId,\n                    fieldname: field,\n                    filter: filter\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!checkResult(result)) {\n                        return false;\n                    }\n                    var ids = [];\n                    for (var a in result) {\n                        var feat = result[a];\n                        if (feat['v'] === null || !feat['v'] || (typeof feat['v'] === 'string' && feat['v'].trim() === ''))\n                            continue;\n                        ids.push(feat['v']);\n                    }\n                    if (aCallBack) {\n                        aCallBack(ids);\n                    }\n                }, 'json');\n            }\n\n            /**\n             * Get the method to use to trigger the layer filter\n             *\n             * 'simple' means like before 3.6: directly change layer request_params and run\n             * 'full' means we first get the features ids for the filter and then trigger the\n             * Lizmap filter based on the attribute table methods. This will cascade the filter\n             * to child layers.\n             *\n             * If there an attribute table config for this layer\n             * we use the filter with selection, in order\n             * to trigger the filter for the children tables\n             * and propagate the filter to the other tools\n             * such as the dataviz, the attribute table, etc.\n             *\n             * You can force the method in the JS console with;\n             * filterConfigData.filterMethod = 'simple'\n             *\n             * @return {string} filterMethod - The method: simple or full\n             */\n            function getFilterMethod() {\n\n                // Default is simple\n                var filterMethod = 'simple';\n\n                // If the filter method is already configured, use it\n                if (filterConfigData.hasOwnProperty('filterMethod')) {\n                    filterMethod = filterConfigData.filterMethod;\n                    if (filterMethod == 'simple' || filterMethod == 'full') {\n                        return filterMethod;\n                    }\n                }\n\n                // If the layer has attribute layer configuration, use full\n                var layerName = filterConfigData.layerName;\n                if ('attributeLayers' in lizMap.config && layerName in lizMap.config.attributeLayers) {\n                    var attributeLayerConfig = lizMap.config.attributeLayers[layerName];\n                    var pkField = attributeLayerConfig['primaryKey'];\n                    if (pkField.split(',').length == 1) {\n                        filterMethod = 'full';\n                    }\n                }\n\n                return filterMethod;\n            }\n\n\n            /**\n             * Compute the global filter to pass to the layer\n             * and apply it to the map and other tools\n             *\n             */\n            function activateFilter() {\n                var layerId = filterConfigData.layerId;\n                var layerName = filterConfigData.layerName;\n\n                var afilter = [];\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item['filter'] && field_item.layerId == layerId) {\n                        afilter.push(field_item['filter']);\n                    }\n                }\n\n                // We use AND clause between fields\n                var filter = afilter.join(' AND ');\n\n                // Deactivate the filter if it is empty.\n                // It can occur when the user unchecks the only checkbox\n                // which was checked before,\n                // or resetted the field input with the reset button\n                // when only this field filter was active\n                if (afilter.length == 0 || filter.trim() == '') {\n                    deactivateFilter();\n                    return true;\n                }\n\n                // Lizmap method to filter the data: simple or full\n                var filterMethod = getFilterMethod();\n                if (filterMethod == 'simple') {\n                    // Use a simple filter only for the getmap and other WMS/WFS queries\n                    lizMap.triggerLayerFilter(layerName, filter);\n                } else {\n                    // Get the filtered features fids\n                    var pkField = lizMap.config.attributeLayers[layerName]['primaryKey'];\n                    getFilteredFeatureIds(filter, pkField, function (filteredIds) {\n                        // Pass a fake false filter if no ids are returned.\n                        // It means the global filter between fields returns no data\n                        if (filteredIds.length == 0) {\n                            filteredIds = [-9999999];\n                        }\n                        // Update the selectedfeatures object\n                        if (!lizMap.config.layers[layerName]['selectedFeatures']) {\n                            lizMap.config.layers[layerName]['selectedFeatures'] = [];\n                        }\n                        lizMap.config.layers[layerName]['selectedFeatures'] = filteredIds;\n\n                        // Trigger the filter based on these selected features\n                        lizMap.events.triggerEvent(\"layerfeaturefilterselected\",\n                            { 'featureType': layerName }\n                        );\n                    });\n                }\n\n                // Get the feature count and display it\n                getFeatureCount(filter);\n\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent(filter);\n                }\n\n                // Set the filter in the global variable\n                filterConfigData.filter = filter;\n\n            }\n\n            // Deactivate the layer filter\n            // And display all features\n            function deactivateFilter() {\n                var layerId = filterConfigData.layerId;\n\n                // Deactivate all triggers to avoid unnecessary requests\n                // and then empty all the input values\n                filterConfigData.deactivated = true;\n                for (var o in filterConfig) {\n                    var field_item = filterConfig[o];\n                    if ('title' in field_item && field_item.layerId == layerId) {\n                        resetFormField(field_item.order);\n                    }\n                }\n                filterConfigData.deactivated = false;\n\n                // Remove filter on map layers\n                var layerName = filterConfigData.layerName;\n\n                // Lizmap method to filter the data: simple or full\n                var filterMethod = getFilterMethod();\n                if (filterMethod == 'simple') {\n                    // Use a simple filter only for the getmap and other WMS/WFS queries\n                    lizMap.deactivateMaplayerFilter(layerName);\n\n                    // Refresh plots\n                    lizMap.events.triggerEvent(\"layerFilterParamChanged\",\n                        {\n                            'featureType': layerName,\n                            'filter': null,\n                            'updateDrawing': false\n                        }\n                    );\n                } else {\n                    // Deactivate the filter\n                    lizMap.events.triggerEvent('layerfeatureremovefilter',\n                        { 'featureType': layerName }\n                    );\n                }\n\n\n                // Get feature count\n                getFeatureCount();\n\n                // Set zoom extent\n                if ($('#liz-filter-zoom').is(\":visible\")) {\n                    setZoomExtent();\n                }\n\n                // Remove feature info geometry\n                removeFeatureInfoGeometry();\n\n            }\n\n            function resetFormField(field_item_order) {\n\n                var field_item = filterConfig[field_item_order];\n\n                if (field_item.type == 'date') {\n                    $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(field_item['min']);\n                    $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(field_item['max']).change(); // .change() so that the slider is also resetted\n                }\n                else if (field_item['type'] == 'numeric') {\n                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(field_item['min']);\n                    $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(field_item['max']).change();\n                }\n                else if (field_item['type'] == 'uniquevalues') {\n                    if (field_item.format == 'checkboxes') {\n                        $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' input.liz-filter-field-value').prop(\"checked\", false);;\n                    }\n                    else if (field_item.format == 'select') {\n                        var selectField = $('#liz-filter-field-' + lizMap.cleanName(field_item.title));\n                        // If the select is multiple && sumoSelect has been used to transform the combobox\n                        if ('sumo' in selectField[0]) {\n                            if (selectField[0].hasAttribute('multiple')) {\n                                selectField[0].sumo.unSelectAll();\n                            } else {\n                                selectField[0].sumo.unSelectItem(selectField.val());\n                            }\n                        } else {\n                            var firstOptionValue = selectField.find('option:first').val();\n                            selectField.val(firstOptionValue);\n                        }\n                    }\n                }\n                else if (field_item['type'] == 'text') {\n                    $('#liz-filter-field-text' + lizMap.cleanName(field_item.title)).val('');\n                }\n\n                // Remove filter in stored object\n                filterConfig[field_item.order]['filter'] = null;\n\n            }\n\n\n            // Removes the getFeatureInfo geometry\n            function removeFeatureInfoGeometry() {\n                var layer = lizMap.map.getLayersByName('locatelayer');\n                if (layer.length == 1)\n                    layer[0].destroyFeatures();\n            }\n\n            // Adapt the size of the dock\n            function adaptLayerFilterSize() {\n                lizMap.events.on({\n                    // Adapt dock size to display metadata\n                    dockopened: function (e) {\n                        if (e.id == 'filter') {\n                            lizMap.updateContentSize();\n                        }\n                    },\n                    rightdockclosed: function () {\n                    },\n                    minidockclosed: function () {\n                    },\n                    layerfeatureremovefilter: function () {\n                        var layerId = filterConfigData.layerId;;\n\n                        // We need to reset the form\n                        // Deactivate all triggers to avoid unnecessary requests\n                        filterConfigData.deactivated = true;\n                        for (var o in filterConfig) {\n                            var field_item = filterConfig[o];\n                            if (!('title' in field_item) || field_item.layerId !== layerId) {\n                                continue;\n                            }\n                            resetFormField(field_item.order);\n                        }\n                        filterConfigData.deactivated = false;\n\n                        // Get feature count\n                        getFeatureCount();\n                    }\n                });\n\n            }\n\n            function formatDT(aDate, dateFormat) {\n                var formatted = $.datepicker.formatDate(dateFormat, aDate);\n                return formatted;\n            };\n\n            // Add an event on the inputs of a given field\n            // For example, do something when a checkbox is clicked\n            // This triggers the calculation of the filter for the field\n            function addFieldEvents(field_item) {\n                var container = 'liz-filter-box-' + lizMap.cleanName(field_item.title);\n                var field_config = filterConfig[field_item.order]\n\n                if (field_item.type == 'uniquevalues') {\n                    if (field_item.format == 'checkboxes') {\n                        $('#' + container + ' input.liz-filter-field-value').click(function () {\n                            var self = $(this);\n                            // Do nothing if disabled\n                            if (self.hasClass('disabled'))\n                                return false;\n\n                            // Filter the data\n                            setFormFieldFilter(field_item);\n                        });\n                    }\n                    if (field_item.format == 'select') {\n\n                        $('#liz-filter-field-' + lizMap.cleanName(field_item.title)).change(function () {\n                            // Filter the data\n                            setFormFieldFilter(field_item);\n                        });\n                    }\n                }\n\n                // date\n                if (field_config['type'] == 'date') {\n\n                    var hasSlider = (true);\n                    if (hasSlider) {\n                        // Get value in seconds\n                        var min_val = Date.parse(field_item['min']) / 1000;\n                        var max_val = Date.parse(field_item['max']) / 1000;\n\n                        // Add a function which will use a timeout\n                        // to prevent too heavy load on server\n                        // when using setFormFieldFilter\n                        var timer = null;\n                        function onDateChange(e, ui) {\n                            if (filterConfigData.deactivated)\n                                return false;\n                            clearTimeout(timer);\n                            timer = setTimeout(function () {\n                                var dt_cur_from = new Date(ui.values[0] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_from, 'yy-mm-dd')\n                                )\n                                var dt_cur_to = new Date(ui.values[1] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_to, 'yy-mm-dd')\n                                )\n\n                                setFormFieldFilter(field_item);\n                            }, 150);\n                        }\n\n                        $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider({\n                            range: true,\n                            min: min_val,\n                            max: max_val,\n                            step: 86400,\n                            values: [min_val, max_val],\n                            change: function (e, ui) {\n                                onDateChange(e, ui);\n                            },\n                            slide: function (e, ui) {\n                                var dt_cur_from = new Date(ui.values[0] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_from, 'yy-mm-dd')\n                                )\n                                var dt_cur_to = new Date(ui.values[1] * 1000); //.format(\"yyyy-mm-dd hh:ii:ss\");\n                                $('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val(\n                                    formatDT(dt_cur_to, 'yy-mm-dd')\n                                )\n                            }\n                        });\n                    }\n\n                    $('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title) + ', #liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data. Only if the slider is not activated (if it is activated, it triggers the filter)\n                        if (!hasSlider) {\n                            setFormFieldFilter(field_item);\n                        } else {\n                            // Change values of the slider\n                            $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider(\n                                \"values\",\n                                [\n                                    Date.parse($('#liz-filter-field-min-date' + lizMap.cleanName(field_item.title)).val()) / 1000,\n                                    Date.parse($('#liz-filter-field-max-date' + lizMap.cleanName(field_item.title)).val()) / 1000\n                                ]\n                            );\n                        }\n                    });\n                }\n\n                // numeric\n                if (field_config['type'] == 'numeric') {\n\n                    var hasSlider = (true);\n                    if (hasSlider) {\n                        var min_val = field_item['min'];\n                        var max_val = field_item['max'];\n\n                        // Add a function which will use a timeout\n                        // to prevent too heavy load on server\n                        // when using setFormFieldFilter\n                        var timer = null;\n                        function onNumericChange(e, ui) {\n                            if (filterConfigData.deactivated)\n                                return false;\n                            clearTimeout(timer);\n                            timer = setTimeout(function () {\n                                var dt_cur_from = ui.values[0];\n                                $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_from);\n                                var dt_cur_to = ui.values[1];\n                                $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_to);\n\n                                setFormFieldFilter(field_item);\n                            }, 300);\n                        }\n\n                        $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider({\n                            range: true,\n                            min: min_val,\n                            max: max_val,\n                            step: 1,\n                            values: [min_val, max_val],\n                            change: function (e, ui) {\n                                onNumericChange(e, ui);\n                            },\n                            slide: function (e, ui) {\n                                var dt_cur_from = ui.values[0];\n                                $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_from);\n                                var dt_cur_to = ui.values[1];\n                                $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val(dt_cur_to);\n                            }\n                        });\n                    }\n\n                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title) + ', #liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data. Only if the slider is not activated (if it is activated, it triggers the filter)\n                        if (!hasSlider) {\n                            setFormFieldFilter(field_item);\n                        } else {\n                            // Change values of the slider\n                            $(\"#liz-filter-slider-range\" + lizMap.cleanName(field_item.title)).slider(\n                                \"values\",\n                                [\n                                    $('#liz-filter-field-min-numeric' + lizMap.cleanName(field_item.title)).val(),\n                                    $('#liz-filter-field-max-numeric' + lizMap.cleanName(field_item.title)).val()\n                                ]\n                            );\n                        }\n                    });\n                }\n\n\n                // text\n                if (field_config['type'] == 'text') {\n                    $('#liz-filter-field-text' + lizMap.cleanName(field_item.title)).change(function () {\n                        // Filter the data\n                        setFormFieldFilter(field_item);\n                    });\n                }\n\n                // Add event on reset buttons\n                $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' button.liz-filter-reset-field').click(function () {\n                    resetFormField($(this).val());\n                    activateFilter();\n                });\n\n                // Add tooltip\n                $('#liz-filter-box-' + lizMap.cleanName(field_item.title) + ' [title]').tooltip();\n\n            }\n\n            function getFeatureCount(filter) {\n                filter = typeof filter !== 'undefined' ? filter : '';\n                var layerId = filterConfigData.layerId;\n\n                var sdata = {\n                    request: 'getFeatureCount',\n                    layerId: layerId,\n                    filter: filter\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!result)\n                        return false;\n                    if ('status' in result && result['status'] == 'error') {\n                        console.log(result.title + ': ' + result.detail);\n                        return false;\n                    }\n                    for (var a in result) {\n                        var feat = result[a];\n                        var nb = feat['c'];\n                        try {\n                            nb = (new Intl.NumberFormat()).format(nb);\n                        } catch (error) {\n                            nb = feat['c'];\n                        }\n                        $('#liz-filter-item-layer-total-count').html(nb);\n                    }\n\n                }, 'json');\n            }\n\n            function setZoomExtent(filter) {\n                filter = typeof filter !== 'undefined' ? filter : '';\n\n                var layerId = filterConfigData.layerId;\n\n                // Get map projection and layer extent\n                var mapProjection = lizMap.map.getProjection();\n                if (mapProjection == 'EPSG:900913')\n                    mapProjection = 'EPSG:3857';\n\n                // Get layer\n                var layerName = filterConfigData.layerName;\n\n                if (!filter) {\n                    // Use layer extent\n                    var itemConfig = lizMap.config.layers[layerName];\n                    if ('bbox' in itemConfig) {\n                        var lex = itemConfig['bbox'][mapProjection]['bbox'];\n                        var extent = lex[0] + ',' + lex[1] + ',' + lex[2] + ',' + lex[3];\n                        $('#liz-filter-zoom').val(extent);\n                    }\n                    return false;\n                }\n\n                // If a filter is set, request the extent with filter\n                var sdata = {\n                    request: 'getExtent',\n                    layerId: layerId,\n                    filter: filter,\n                    crs: mapProjection\n                };\n                $.get(filterConfigData.url, sdata, function (result) {\n                    if (!result)\n                        return false;\n                    if ('status' in result && result['status'] == 'error') {\n                        console.log(result.title + ': ' + result.detail);\n                        // Hide Zoom button\n                        $('#liz-filter-zoom').hide();\n                        return;\n                    }\n\n                    for (var a in result) {\n                        //BOX(33373 7527405.72750002,449056.961709125 7724585.66040861)\n                        var sourcebbox = result[a]['bbox'];\n                        if (!sourcebbox)\n                            return false;\n                        var sbbox = $.parseJSON(sourcebbox);\n                        var bbox = sbbox.bbox;\n                        var extent = bbox[0] + ',' + bbox[1] + ',' + bbox[2] + ',' + bbox[3];\n                        $('#liz-filter-zoom').val(extent);\n                    }\n\n                }, 'json');\n            }\n\n            function zoomToFeatures() {\n                var bounds = $('#liz-filter-zoom').val();\n                var abounds = null;\n                if (bounds) {\n                    abounds = bounds.split(',');\n                }\n                if (!bounds || abounds.length != 4) {\n                    return false;\n                }\n                var extent = new OpenLayers.Bounds(abounds[0], abounds[1], abounds[2], abounds[3]);\n                lizMap.map.zoomToExtent(extent);\n                return false;\n            }\n\n            // Launch LayerFilter feature\n            addLayerFilterToolInterface();\n            launchLayerFilterTool(filterConfigData.layerId);\n\n            // Listen to the layer selector changes\n            $('#liz-filter-layer-selector').change(function () {\n                deactivateFilter();\n                filterConfigData.layerId = $(this).val();\n                launchLayerFilterTool($(this).val());\n            });\n\n        } // uicreated\n    });\n\n\n}();\n"],"names":["lizMap","events","on","filterConfig","constructor","Object","keys","length","$","addClass","launchLayerFilterTool","layerId","getConfig","getLayerConfigById","layerName","filterConfigData","remove","formFilterLayersSorted","o","field_item","push","append","String","order","conf","getFormFieldInput","getLayerFilterForm","dockopened","e","id","updateContentSize","rightdockclosed","minidockclosed","layerfeatureremovefilter","deactivated","resetFormField","getFeatureCount","is","setZoomExtent","field_config","fetchRequests","sdata","request","fieldname","field","filter","fetch","url","URLSearchParams","then","response","json","keyValues","fieldConf","keyValueConfig","type","data","getSourceLayer","source_layer_id","source_typename","typename","undefined","mainLizmap","wfs","getFeature","TYPENAME","PROPERTYNAME","code_field","label_field","EXP_FILTER","exp_filter","Promise","all","responses","result","rawKeyValues","checkResult","features","forEach","feature","properties","html","getFormFieldHeader","format","cleanName","title","feat","dhtml","fkeys","sort","a","b","localeCompare","f_val","label","hasOwnProperty","addFieldEvents","uniqueValuesFormInput","max_date","min_date","get","dmin","formatDT","Date","dmax","datepicker","dateFormat","changeMonth","changeYear","minDate","maxDate","dateFormInput","Number","numericFormInput","autocompleteData","trim","lizDict","autocomplete","source","autoFocus","delay","minLength","select","event","ui","this","val","item","value","change","textFormInput","console","log","detail","setFormFieldFilter","allchecked","nonechecked","selectId","selectVal","clist","Array","isArray","achecked","includes","replace","inputId","sep","lk","i","provider","join","setUniqueValuesFilter","filters","min_id","max_id","min_val","max_val","startField","endField","parse","setDateFilter","setNumericFilter","setTextFilter","activateFilter","getFilterMethod","filterMethod","config","attributeLayers","split","afilter","deactivateFilter","triggerLayerFilter","pkField","aCallBack","ids","getFilteredFeatureIds","filteredIds","layers","triggerEvent","layer","deactivateMaplayerFilter","map","getLayersByName","destroyFeatures","field_item_order","prop","selectField","hasAttribute","sumo","unSelectAll","unSelectItem","firstOptionValue","find","aDate","formatDate","hasSlider","container","click","hasClass","timer","slider","range","min","max","step","values","clearTimeout","setTimeout","dt_cur_from","dt_cur_to","onDateChange","slide","onNumericChange","tooltip","nb","Intl","NumberFormat","error","mapProjection","getProjection","itemConfig","lex","extent","crs","hide","sourcebbox","bbox","parseJSON","flayers","lconfig_get","lname","lconf","displayName","getVectorLayerResultFormat","getLayerFilterDockRoot","bounds","abounds","OpenLayers","Bounds","zoomToExtent","zoomToFeatures","request_params","exportVectorLayer","addLayerFilterToolInterface"],"sourceRoot":""}