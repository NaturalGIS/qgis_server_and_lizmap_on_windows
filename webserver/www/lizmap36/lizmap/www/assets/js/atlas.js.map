{"version":3,"file":"../../lizmap/www/assets/js/atlas.js","mappings":"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","sources":["webpack://assets/./src/legacy/atlas.js"],"sourcesContent":["(function () {\n\n    lizMap.events.on({\n        'uicreated': function () {\n\n            var lizAtlasLayers;\n\n            // Single atlas layer\n            if ('atlasEnabled' in lizMap.config.options && lizMap.config.options['atlasEnabled'] === 'True'){\n                var cfgOptions = lizMap.config.options;\n                var atlasLayer = {};\n\n                atlasLayer[cfgOptions.atlasLayer] = {\n                    atlasDuration: cfgOptions.atlasDuration,\n                    atlasFeatureLabel: cfgOptions.atlasFeatureLabel,\n                    atlasZoom: cfgOptions.atlasZoom,\n                    atlasPrimaryKey: cfgOptions.atlasPrimaryKey,\n                    atlasTriggerFilter: cfgOptions.atlasTriggerFilter,\n                    atlasHighlightGeometry: cfgOptions.atlasHighlightGeometry,\n                    atlasDisplayLayerDescription: cfgOptions.atlasDisplayLayerDescription,\n                    atlasDisplayPopup: cfgOptions.atlasDisplayPopup,\n                    atlasSortField: cfgOptions.atlasSortField\n                }\n\n                lizAtlasLayers = {\n                    layerOptions: atlasLayer,\n                    globalOptions: {\n                        atlasShowAtStartup: cfgOptions.atlasShowAtStartup,\n                        atlasAutoPlay: cfgOptions.atlasAutoPlay\n                    }\n                }\n            }\n            // Multiple atlas layer\n            else if ('atlas' in lizMap.config && 'layers' in lizMap.config.atlas && Array.isArray(lizMap.config.atlas['layers']) && lizMap.config.atlas['layers'].length > 0){\n                var atlasLayers = {};\n                for (var index = 0; index < lizMap.config.atlas.layers.length; index++) {\n                    const layerConfig = lizMap.config.atlas.layers[index];\n\n                    atlasLayers[layerConfig.layer] = {\n                        atlasDuration: layerConfig.duration,\n                        atlasFeatureLabel: layerConfig.featureLabel,\n                        atlasZoom: layerConfig.zoom,\n                        atlasPrimaryKey: layerConfig.primaryKey,\n                        atlasTriggerFilter: layerConfig.triggerFilter,\n                        atlasHighlightGeometry: layerConfig.highlightGeometry,\n                        atlasDisplayLayerDescription: layerConfig.displayLayerDescription,\n                        atlasDisplayPopup: layerConfig.displayPopup,\n                        atlasSortField: layerConfig.sortField\n                    }\n                }\n\n                lizAtlasLayers = {\n                    layerOptions: atlasLayers,\n                    globalOptions: {\n                        atlasShowAtStartup: lizMap.config.options.atlasShowAtStartup,\n                        atlasAutoPlay: lizMap.config.options.atlasAutoPlay\n                    }\n                }\n            }\n\n            if (!lizAtlasLayers){\n                return;\n            }\n\n            var lizAtlasLayersCount = Object.keys(lizAtlasLayers.layerOptions).length;\n            var getFeatureDataCallbackCounter = 0;\n\n            var atlasGlobalOptions = lizAtlasLayers.globalOptions;\n            var lizAtlasGlobalConfig = {\n                'showAtStartup': atlasGlobalOptions['atlasShowAtStartup'] == 'True' ? true : false,\n                'autoPlay': atlasGlobalOptions['atlasAutoPlay'] == 'True' ? true : false\n            };\n\n            var lizAtlasConfigArray = [];\n\n            var layerOrder = 0;\n\n            for (var layerId in lizAtlasLayers.layerOptions) {\n                var getLayerConfig = lizMap.getLayerConfigById(layerId);\n\n                // If layer has no config (because current user has no rights to view it for example)\n                // decrement lizAtlasLayersCount and continue to next layer\n                if (!getLayerConfig){\n                    lizAtlasLayersCount--;\n                    continue;\n                }\n                const layerConfig = getLayerConfig[1];\n                var featureType = getLayerConfig[0];\n                const wmsName = layerConfig?.shortname || featureType;\n\n                var atlasLayerOptions = lizAtlasLayers.layerOptions[layerId];\n\n                var primaryKey = atlasLayerOptions['atlasPrimaryKey'] != '' ? atlasLayerOptions['atlasPrimaryKey'] : null;\n                if (!primaryKey)\n                    return;\n                var titleField = atlasLayerOptions['atlasFeatureLabel'] != '' ? atlasLayerOptions['atlasFeatureLabel'] : null;\n                if (!titleField)\n                    return;\n                var sortField = atlasLayerOptions['atlasSortField'] != '' ? atlasLayerOptions['atlasSortField'] : titleField;\n\n                var lizAtlasConfig = {\n                    'layername': featureType,\n                    'layerId': layerConfig.id,\n                    'wmsName': wmsName,\n                    'displayLayerDescription': atlasLayerOptions['atlasDisplayLayerDescription'] == 'True' ? true : false,\n                    'primaryKey': primaryKey,\n                    'titleField': titleField,\n                    'sortField': sortField,\n                    'duration': atlasLayerOptions['atlasDuration'],\n                    'drawFeatureGeom': atlasLayerOptions['atlasHighlightGeometry'] == 'True' ? true : false,\n                    'atlasDisplayPopup': atlasLayerOptions['atlasDisplayPopup'] == 'True' ? true : false,\n                    'triggerFilter': atlasLayerOptions['atlasTriggerFilter'] == 'True' ? true : false,\n                    'zoom': atlasLayerOptions['atlasZoom'] == '' ? false : atlasLayerOptions['atlasZoom']\n                };\n                var lizAtlasTimer;\n\n                // Launch Atlas feature\n                getAtlasData(lizAtlasConfig, layerOrder);\n                layerOrder++;\n            }\n\n            function getAtlasData(lizAtlasConfig, layerOrder) {\n\n                var featureType = lizAtlasConfig.layername;\n\n                // Get data\n                lizMap.getFeatureData(featureType, featureType + ':', null, 'geom', false, null, null,\n                    function (aName, aFilter, aFeatures, aAliases) {\n\n                        lizAtlasConfig['features'] = aFeatures;\n                        lizAtlasConfig['featureType'] = featureType;\n                        prepareFeatures(lizAtlasConfig);\n\n                        lizAtlasConfigArray[layerOrder] = lizAtlasConfig;\n\n                        // Launch atlas when last ajax request had finished\n                        getFeatureDataCallbackCounter++;\n                        if (getFeatureDataCallbackCounter === lizAtlasLayersCount) {\n                            launchAtlas(lizAtlasConfigArray, lizAtlasGlobalConfig);\n                        }\n\n                        $('body').css('cursor', 'auto');\n                        return false;\n                    });\n            }\n\n            function updateAtlasData() {\n                // Get data\n                lizMap.getFeatureData(lizAtlasConfig['featureType'], lizAtlasConfig['featureType'] + ':', null, 'geom', false, null, null,\n                    function (aName, aFilter, aFeatures, aAliases) {\n                        lizAtlasConfig['features'] = aFeatures;\n                        prepareFeatures(lizAtlasConfig);\n\n                        var options = '<option value=\"-1\"> --- </option>';\n                        var pkey_field = lizAtlasConfig['primaryKey'];\n                        for (var i in lizAtlasConfig['features_sorted']) {\n                            var item = lizAtlasConfig['features_sorted'][i];\n\n                            // Add option\n                            options += '<option value=\"' + i + '\">';\n                            options += item[lizAtlasConfig['titleField']];\n                            options += '</option>';\n                        }\n\n                        var val = $('#liz-atlas-select').val();\n                        $('#liz-atlas-select').html(options);\n                        // reset val\n                        $('#liz-atlas-select').val(val);\n                        // get popup\n                        $('#liz-atlas-select').change();\n\n                        return false;\n                    });\n            }\n\n            function prepareFeatures(lizAtlasConfig) {\n\n                // Get and order features\n                lizAtlasConfig['features_with_pkey'] = {};\n                var items = [];\n                var pkey_field = lizAtlasConfig['primaryKey'];\n                var s_field = lizAtlasConfig['sortField'];\n                if (!s_field)\n                    s_field = pkey_field;\n                for (var i in lizAtlasConfig.features) {\n\n                    // Get feature\n                    var feat = lizAtlasConfig.features[i];\n                    var fid = feat.id.split('.').pop();\n                    var pk_val = feat.properties[pkey_field];\n\n                    // Add feature in dictionary for further ref\n                    lizAtlasConfig['features_with_pkey'][pk_val] = feat;\n\n                    // Add feature to sorted oject\n                    items.push(feat.properties);\n                }\n\n                items.sort(function (a, b) {\n                    var nameA = a[s_field];\n                    var nameB = b[s_field];\n                    if (typeof (nameA) == 'string' || typeof (nameB) == 'string') {\n                        if (!nameA)\n                            nameA = '';\n                        else\n                            nameA = nameA.toUpperCase(); // ignore upper and lowercase\n                        if (!nameB)\n                            nameB = '';\n                        else\n                            nameB = nameB.toUpperCase(); // ignore upper and lowercase\n                    }\n                    if (nameA < nameB) {\n                        return -1;\n                    }\n                    if (nameA > nameB) {\n                        return 1;\n                    }\n\n                    // names must be equal\n                    return 0;\n                });\n\n                lizAtlasConfig['features_sorted'] = items;\n            }\n\n            function getAtlasHome(lizAtlasConfig) {\n\n\n                var home = '';\n\n                // Add description\n                if (lizAtlasConfig['displayLayerDescription']) {\n                    var labstract = lizMap.config.layers[lizAtlasConfig.layername]['abstract'];\n                    if (labstract != '') {\n                        home += '<p id=\"liz-atlas-item-layer-abstract\">' + lizMap.config.layers[lizAtlasConfig.layername]['abstract'] + '</p>';\n                    }\n                }\n\n                // Add combobox with all data\n                home += '<p style=\"padding:0px 10px;\">';\n                home += '<select id=\"liz-atlas-select\">';\n                home += '<option value=\"-1\"> --- </option>';\n                var pkey_field = lizAtlasConfig['primaryKey'];\n                for (var i in lizAtlasConfig['features_sorted']) {\n                    var item = lizAtlasConfig['features_sorted'][i];\n\n                    // Add option\n                    home += '<option value=\"' + i + '\">';\n                    home += item[lizAtlasConfig['titleField']];\n                    home += '</option>';\n                }\n                home += '</select>';\n                home += '<br><span>';\n                home += '<button class=\"btn btn-mini btn-primary liz-atlas-item\" value=\"-1\">' + lizDict['atlas.toolbar.prev'] + '</button>';\n                home += '&nbsp;';\n                home += '<button class=\"btn btn-mini btn-primary liz-atlas-item\" value=\"1\">' + lizDict['atlas.toolbar.next'] + '</button>';\n                home += '&nbsp;';\n                home += '<button class=\"btn btn-mini btn-wanrning liz-atlas-run\" value=\"1\">' + lizDict['atlas.toolbar.play'] + '</button>';\n                home += '&nbsp;';\n                home += '</span>';\n                home += '</span>';\n                home += '</br>';\n                home += '</p>';\n                home += '<div id=\"liz-atlas-item-detail\" style=\"display:none;\">';\n                home += '</div>';\n                home += '</div>';\n\n                lizAtlasConfig.home = home;\n                return home;\n            }\n\n            function launchAtlas(lizAtlasConfigArray, lizAtlasGlobalConfig) {\n\n                let atlasHTML = '';\n\n                // Multiple atlas\n                if (lizAtlasConfigArray.length > 1){\n                    // Build select to choose between atlas layers\n                    atlasHTML = '<i class=\"icon-globe icon-white\" style=\"margin-right: 4px;vertical-align: baseline;\"></i><select id=\"select-atlas-layer\">';\n                    for (let i = 0; i < lizAtlasConfigArray.length; i++) {\n                        atlasHTML += '<option value=\"' + lizAtlasConfigArray[i].layerId + '\">' + lizMap.config.layers[lizAtlasConfigArray[i].layername]['title'] + '</option>';\n                    }\n\n                    atlasHTML += '</select>';\n\n                }else{ // Single atlas\n                    atlasHTML += '<h3><i class=\"icon-globe icon-white\" style=\"margin-right: 4px;\"></i>' + lizMap.config.layers[lizAtlasConfigArray[0].layername]['title'] + '</h3>';\n                }\n\n                atlasHTML += '<div id=\"atlas-content\" style=\"border-top: #F0F0F0 dashed 1px;padding-top: 5px;\"></div>';\n\n                // Add dock\n                lizMap.addDock(\n                    'atlas',\n                    lizDict['atlas.toolbar.title'],\n                    'right-dock',\n                    atlasHTML,\n                    'icon-globe'\n                );\n\n                // Multiple atlas\n                if (lizAtlasConfigArray.length > 1) {\n                    $('#select-atlas-layer')\n                        .change(function () {\n                            // deactivate current atlas\n                            deactivateAtlas();\n\n                            var layerId = $(this).val();\n\n                            for (var i = 0; i < lizAtlasConfigArray.length; i++) {\n                                if (layerId === lizAtlasConfigArray[i].layerId) {\n                                    lizAtlasConfig = lizAtlasConfigArray[i];\n                                    displayAtlasContent();\n                                }\n                            }\n\n                            lizMap.events.triggerEvent(\"atlasready\", lizAtlasConfig);\n\n                            return false;\n                        });\n\n                    // Display first atlas layer\n                    $('#select-atlas-layer').change();\n                }else{\n                    lizAtlasConfig = lizAtlasConfigArray[0];\n                    displayAtlasContent();\n                }\n\n                // Start animation for first layer if set\n                if (lizAtlasGlobalConfig['autoPlay'] && !lizMap.checkMobile()) {\n                    $('button.liz-atlas-run').click();\n                }\n\n                // Show dock\n                if (lizAtlasGlobalConfig['showAtStartup'] && !lizMap.checkMobile()) {\n                    $('#mapmenu li.atlas:not(.active) a').click();\n                    // Hide legend\n                    $('#mapmenu li.switcher.active a').click();\n                }\n\n                // Limit dock size\n                adaptAtlasSize();\n            }\n\n            function displayAtlasContent(){\n                // Get Atlas home\n                var home = getAtlasHome(lizAtlasConfig);\n\n                $(\"#atlas-content\").html(home);\n\n                // Add events\n                activateAtlasTrigger(lizAtlasConfig);\n\n                // Only if features in layer\n                if (lizAtlasConfig.features.length != 0) {\n                    // Activate filter\n                    if (lizAtlasConfig.triggerFilter && lizAtlasConfig.hideFeaturesAtStratup) {\n                        // Select feature\n                        lizMap.events.triggerEvent('layerfeatureselected',\n                            { 'featureType': lizAtlasConfig.featureType, 'fid': -99999, 'updateDrawing': false }\n                        );\n                        // Filter selected feature\n                        lizMap.events.triggerEvent('layerfeaturefilterselected',\n                            { 'featureType': lizAtlasConfig.featureType }\n                        );\n                    }\n                }\n\n                lizMap.events.triggerEvent(\"uiatlascreated\", lizAtlasConfig);\n\n                lizMap.events.on({\n                    lizmapeditionfeaturecreated: function (e) {\n                        if (e.layerId == lizAtlasConfig.layerId)\n                            updateAtlasData();\n                    },\n                    lizmapeditionfeaturemodified: function (e) {\n                        if (e.layerId == lizAtlasConfig.layerId)\n                            updateAtlasData();\n                    },\n                    lizmapeditionfeaturedeleted: function (e) {\n                        if (e.layerId == lizAtlasConfig.layerId)\n                            updateAtlasData();\n                    }\n                });\n            }\n\n            function adaptAtlasSize() {\n                lizMap.events.on({\n                    // Adapt dock size to display metadata\n                    rightdockopened: function (e) {\n                        if (e.id == 'atlas') {\n                            // Size : add class to content to enabled specific css to be applied\n                            $('#content').addClass('atlas-visible');\n                            lizMap.updateContentSize();\n\n                        }\n                    },\n                    rightdockclosed: function (e) {\n                        if (e.id == 'atlas') {\n\n                            // Set right-dock default size by removing #content class\n                            $('#content').removeClass('atlas-visible');\n                            lizMap.updateContentSize();\n\n                            // Deactivate atlas and stop animation\n                            deactivateAtlas();\n                        }\n                    }\n                });\n            }\n\n            function activateAtlasTrigger() {\n                $('#liz-atlas-select')\n                    .change(function () {\n                        var i = $(this).val();\n                        var len = lizAtlasConfig['features_sorted'].length;\n\n                        if (i == -1) {\n                            deactivateAtlas();\n                            return false;\n                        }\n                        if (i && i >= 0 && i < len) {\n                            var item = lizAtlasConfig['features_sorted'][i];\n\n                            var pkey_field = lizAtlasConfig['primaryKey'];\n\n                            if (item[pkey_field] in lizAtlasConfig['features_with_pkey']) {\n                                var feature = lizAtlasConfig['features_with_pkey'][item[pkey_field]];\n                                runAtlasItem(feature);\n\n                            } else {\n                                console.log(\"no feature found\");\n                            }\n                        }\n                        return false;\n                    });\n\n                $('#atlas div.menu-content button.liz-atlas-item')\n                    .click(function () {\n                        var a = parseInt($(this).val());\n                        var curval = parseInt($('#liz-atlas-select').val());\n                        var nextval = a + curval;\n                        var len = lizAtlasConfig['features_sorted'].length;\n                        if (nextval >= len) {\n                            nextval = 0;\n                        }\n                        if (nextval >= 0 && nextval < len) {\n                            $('#liz-atlas-select').val(nextval).change();\n                        }\n                        return false;\n                    });\n\n                // Timer\n                $('#atlas div.menu-content button.liz-atlas-run').click(function () {\n                    // Get button value\n                    var a = $(this).val();\n\n                    // Get animation duration\n                    var duration = lizAtlasConfig.duration;\n                    if (!(parseInt(duration) > 0)){\n                        duration = 5;\n                    }\n                    var step = parseInt(duration) * 1000;\n                    if (step < 2 || step > 60000) {\n                        step = 5000;\n                    }\n\n                    // Run or stop animation\n                    if (a == '1') {\n                        // Click on the next button\n                        $('button.liz-atlas-item[value=\"1\"]').click();\n\n                        // Change the run button value into 0\n                        $(this).val(0);\n\n                        // Change button look\n                        $(this).text(lizDict['atlas.toolbar.stop']).addClass('btn-danger');\n\n                        // Run timer\n                        lizAtlasTimer = setInterval(function () {\n                            // Click on then next button for each step\n                            $('button.liz-atlas-item[value=\"1\"]').click();\n                        }, step);\n                    } else {\n                        deactivateAtlas();\n                    }\n                });\n            }\n\n\n            function runAtlasItem(feature) {\n\n                // Use OL tools to reproject feature geometry\n                var format = new OpenLayers.Format.GeoJSON({\n                    ignoreExtraDims: true\n                });\n                var feat = format.read(feature)[0];\n                var f = feat.clone();\n                var proj = lizMap.config.layers[lizAtlasConfig.layername]['featureCrs'];\n                f.geometry.transform(proj, lizMap.map.getProjection());\n\n                // Zoom to feature\n                if (lizAtlasConfig['zoom']) {\n                    if (lizAtlasConfig['zoom'].toLowerCase() == 'center') {\n                        // center\n                        var lonlat = f.geometry.getBounds().getCenterLonLat();\n                        lizMap.map.setCenter(lonlat);\n                    }\n                    else {\n                        // zoom\n                        lizMap.map.zoomToExtent(f.geometry.getBounds());\n                    }\n                }\n\n                // Draw feature geometry\n                var getLayer = lizMap.map.getLayersByName('locatelayer');\n                if (lizAtlasConfig.drawFeatureGeom && getLayer.length > 0) {\n                    const alayer = getLayer[0];\n                    alayer.destroyFeatures();\n                    alayer.addFeatures([f]);\n                }\n\n                // Display popup\n                if (lizAtlasConfig['atlasDisplayPopup']) {\n                    lizMap.getFeaturePopupContent(lizAtlasConfig.wmsName, feature, function (data) {\n                        var popupContainerId = 'liz-atlas-item-detail';\n                        // Add class to table\n                        var popupReg = new RegExp('lizmapPopupTable', 'g');\n                        text = data.replace(popupReg, 'table table-condensed lizmapPopupTable');\n                        var text = '<div class=\"lizmapPopupContent\">' + text + '</div>';\n                        // Remove <h4> with layer title\n                        var titleReg = new RegExp('<h4>.+</h4>');\n                        text = text.replace(titleReg, '');\n                        $('#' + popupContainerId).html(text).show();\n\n                        // Trigger event ? a bit buggy\n                        lizMap.events.triggerEvent(\"lizmappopupdisplayed\", { 'popup': null, 'containerId': popupContainerId });\n\n                        // Add children\n                        lizMap.addChildrenFeatureInfo(data, popupContainerId);\n                        // Display the plots of the children layers features filtered by popup item\n                        lizMap.addChildrenDatavizFilteredByPopupFeature(data, popupContainerId);\n\n                    });\n                }\n\n                // Trigger Filter\n                if (lizAtlasConfig['triggerFilter']) {\n\n                    var fid = feature.id.split('.').pop();\n\n                    // Select feature\n                    lizMap.events.triggerEvent('layerfeatureselected',\n                        { 'featureType': lizAtlasConfig.featureType, 'fid': fid, 'updateDrawing': false }\n                    );\n                    // Filter selected feature\n                    lizMap.events.triggerEvent('layerfeaturefilterselected',\n                        { 'featureType': lizAtlasConfig.featureType }\n                    );\n                }\n            }\n\n            function deactivateAtlas() {\n                // Stop animation\n                if (lizAtlasTimer) {\n                    var btrun = $('#atlas div.menu-content button.liz-atlas-run');\n                    // Change button value\n                    btrun.val(1);\n\n                    // Change button look\n                    btrun.text(lizDict['atlas.toolbar.play']).removeClass('btn-danger');\n\n                    // Reset interval and time\n                    clearInterval(lizAtlasTimer);\n                    lizAtlasTimer = null;\n                }\n\n                // Deactivate highlight\n                if (lizAtlasConfig.drawFeatureGeom) {\n                    lizMap.clearDrawLayer('locatelayer');\n                }\n\n                // Deactivate filter\n                if (lizAtlasConfig.triggerFilter && lizMap.lizmapLayerFilterActive) {\n                    if (lizAtlasConfig.hideFeaturesAtStratup) {\n                        // Select feature\n                        lizMap.events.triggerEvent('layerfeatureselected',\n                            { 'featureType': lizAtlasConfig.featureType, 'fid': -99999, 'updateDrawing': false }\n                        );\n                        // Filter selected feature\n                        lizMap.events.triggerEvent('layerfeaturefilterselected',\n                            { 'featureType': lizAtlasConfig.featureType }\n                        );\n                    } else\n                        lizMap.events.triggerEvent(\"layerfeatureremovefilter\",\n                            { 'featureType': lizAtlasConfig.featureType }\n                        );\n                }\n                // Hide some containers\n                $('#liz-atlas-item-detail').hide();\n            }\n\n        } // uicreated\n    });\n})();\n"],"names":["lizMap","events","on","lizAtlasLayers","config","options","cfgOptions","atlasLayer","atlasDuration","atlasFeatureLabel","atlasZoom","atlasPrimaryKey","atlasTriggerFilter","atlasHighlightGeometry","atlasDisplayLayerDescription","atlasDisplayPopup","atlasSortField","layerOptions","globalOptions","atlasShowAtStartup","atlasAutoPlay","atlas","Array","isArray","length","atlasLayers","index","layers","layerConfig","layer","duration","featureLabel","zoom","primaryKey","triggerFilter","highlightGeometry","displayLayerDescription","displayPopup","sortField","lizAtlasLayersCount","Object","keys","getFeatureDataCallbackCounter","atlasGlobalOptions","lizAtlasGlobalConfig","lizAtlasConfigArray","layerOrder","layerId","getLayerConfig","getLayerConfigById","featureType","wmsName","shortname","atlasLayerOptions","titleField","lizAtlasTimer","lizAtlasConfig","id","getAtlasData","layername","getFeatureData","aName","aFilter","aFeatures","aAliases","prepareFeatures","launchAtlas","$","css","updateAtlasData","i","val","html","change","items","pkey_field","s_field","features","feat","pk_val","split","pop","properties","push","sort","a","b","nameA","nameB","toUpperCase","atlasHTML","addDock","lizDict","deactivateAtlas","this","displayAtlasContent","triggerEvent","checkMobile","click","rightdockopened","e","addClass","updateContentSize","rightdockclosed","removeClass","home","getAtlasHome","len","item","feature","f","OpenLayers","Format","GeoJSON","ignoreExtraDims","read","clone","proj","geometry","transform","map","getProjection","toLowerCase","lonlat","getBounds","getCenterLonLat","setCenter","zoomToExtent","getLayer","getLayersByName","drawFeatureGeom","alayer","destroyFeatures","addFeatures","getFeaturePopupContent","data","popupContainerId","popupReg","RegExp","text","replace","titleReg","show","addChildrenFeatureInfo","addChildrenDatavizFilteredByPopupFeature","fid","runAtlasItem","console","log","nextval","parseInt","step","setInterval","hideFeaturesAtStratup","lizmapeditionfeaturecreated","lizmapeditionfeaturemodified","lizmapeditionfeaturedeleted","btrun","clearInterval","clearDrawLayer","lizmapLayerFilterActive","hide"],"sourceRoot":""}